/**
 *  © 2024 Adam Lui & contributors under the MIT license.
 *  Source: https://github.js-utils.com/tree/main/generate-pw/src
 *  Documentation: https://github.js-utils.com/tree/main/generate-pw/docs
 */
let randomInt;try{({randomInt}=require("crypto"))}catch(e){const b=window.crypto||window.msCrypto;randomInt=(e,r)=>{var s=b?.getRandomValues(new Uint32Array(1))[0]/4294967295||Math.random();return Math.floor(s*(r-e))+e}}const charsets={lower:"abcdefghijklmnopqrstuvwxyz",upper:"ABCDEFGHIJKLMNOPQRSTUVWXYZ",numbers:"0123456789",symbols:"!@#$%^&*()-_=+[]{}/\\|;:'\",.<>?"};function generatePassword(t={}){var e={verbose:!0,length:8,qty:1,charset:"",exclude:"",numbers:!1,symbols:!1,lowercase:!0,uppercase:!0,excludeSimilarChars:!1,strict:!1};if(validateOptions(t,e,"https://github.com/adamlui/js-utils/tree/main/generate-pw#generatepasswordoptions","generatePassword({ verbose: false, numbers: true })")){if(1<(t={...e,...t}).qty){const{qty:r,...s}=t;return generatePasswords(r,s)}{var o,e="generatePasswords"==generatePassword.caller?.name;t.verbose&&!e&&console.info("generatePassword() » Initializing character set...");let r=t.charset||(t.numbers?charsets.numbers:"")+(t.symbols?charsets.symbols:"")+(t.lowercase?charsets.lower:"")+(t.uppercase?charsets.upper:""),s=(""==r&&(r=charsets.lower+charsets.upper),t.exclude&&(t.verbose&&!e&&console.info("generatePassword() » Removing excluded characters..."),r=r.replace(new RegExp(`[${t.exclude}]`,"g"),"")),t.excludeSimilarChars&&(t.verbose&&!e&&console.info("generatePassword() » Excluding similar characters..."),r=r.replace(/[o0Oil1|]/g,"")),t.verbose&&!e&&console.info("generatePassword() » Generating password..."),"");for(let e=0;e<t.length;e++){var n=randomInt(0,r.length);s+=r.charAt(n)}return t.strict&&(t.verbose&&!e&&console.info("generatePassword() » Enforcing strict mode..."),o=["number","symbol","lower","upper"].filter(e=>t[e+"s"]||t[e+"case"]),s=strictify(s,o)),t.verbose&&!e&&(console.info("generatePassword() » Password generated!"),"undefined"!=typeof require&&/cli(?:\.min)?\.js$/.test(require.main.filename)||console.info("generatePassword() » Check returned string.")),s}}}function generatePasswords(r,s={}){var e="https://github.com/adamlui/js-utils/tree/main/generate-pw#generatepasswordsqty-options",t={verbose:!0,length:8,charset:"",exclude:"",numbers:!1,symbols:!1,lowercase:!0,uppercase:!0,excludeSimilarChars:!1,strict:!1};if(r=parseInt(r,10),isNaN(r)||r<1)console.error("generatePasswords() » ERROR: 1st arg <qty> can only be an integer > 0."),console.info("generatePasswords() » For more help, please visit "+e);else if(validateOptions(s,t,e,"generatePasswords(3, { verbose: false, symbols: true })")){(s={...t,...s}).verbose&&console.info(`generatePasswords() » Generating password${1<r?"s":""}...`);var o=[];for(let e=0;e<r;e++)o.push(generatePassword(s));return s.verbose&&console.info(`generatePasswords() » Password${1<r?"s":""} generated!`),"undefined"!=typeof require&&/cli(?:\.min)?\.js$/.test(require.main.filename)||console.info("generatePasswords() » Check returned array."),o}}function strictify(t,o=["number","symbol","lower","upper"],e={}){var r="https://github.com/adamlui/js-utils/tree/main/generate-pw#strictifypassword-requiredchartypes-options",n={verbose:!0};if("string"!=typeof t)console.error("strictify() » ERROR: 1st arg <password> must be a string."),console.info("strictify() » For more help, please visit "+r);else{var s=["number","symbol","lower","upper"];for(const d of o=Array.isArray(o)?o:[o])if(!s.includes(d))return console.error(`strictify() » ERROR: 2nd arg \`${d}\` is an invalid character type.`),console.info(`strictify() » Valid character types: [ ${s.map(e=>`'${e}'`).join(", ")} ]`),console.info("strictify() » Pass one as a string or more as an array, or all types will be required."),void console.info("strictify() » For more help, please visit "+r);if(validateOptions(e,n,r,"strictify('pa55word', ['symbol', 'upper'], { verbose: false })")){e={...n,...e};var a={};for(const p of o)a["has"+p.charAt(0).toUpperCase()+p.slice(1)]=!1;for(let e=0;e<t.length;e++)for(const f of o)(charsets[f]||charsets[f+"s"]).includes(t.charAt(e))&&(a["has"+f.charAt(0).toUpperCase()+f.slice(1)]=!0);e.verbose&&console.info("strictify() » Strictifying password...");var i=Math.min(t.length,o.length),l=[];let r=0,s=t;for(const u of o)if(r<i&&!a["has"+u.charAt(0).toUpperCase()+u.slice(1)]){let e;for(;e=randomInt(0,t.length),l.includes(e););l.push(e);var c=charsets[u]||charsets[u+"s"];s=s.substring(0,e)+c.charAt(randomInt(0,c.length))+s.substring(e+1),r++}return e.verbose&&(0<r?(console.info("strictify() » Password is now strict!"),console.info("strictify() » Check returned string.")):(console.info(`strictify() » Password already includes ${o.join(" + ")} characters!`),console.info("strictify() » No modifications made."))),s}}}function validateStrength(r,s={}){var e="https://github.com/adamlui/js-utils/tree/main/generate-pw#validatestrengthpassword-options",t={minLength:8,minLower:1,minUpper:1,minNumber:1,minSymbol:1},o={verbose:!0};if("string"!=typeof r)console.error("validateStrength() » ERROR: 1st arg <password> must be a string."),console.info("validateStrength() » For more help, please visit "+e);else if(validateOptions(s,o,e,"validateStrength('pa55word', { verbose: false })")){(s={...o,...s}).verbose&&console.info("validateStrength() » Validating password strength...");var n={lower:0,upper:0,number:0,symbol:0};for(const i of r)for(const l of Object.keys(n))(charsets[l]||charsets[l+"s"]).includes(i)&&n[l]++;var a=[];r.length<t.minLength&&a.push(`Make it at least ${t.minLength} characters long.`);for(const c of Object.keys(n))n[c]<t["min"+c.charAt(0).toUpperCase()+c.slice(1)]&&a.push("Include at least one "+c+`${["upper","lower"].includes(c)?"case letter":""}.`);let e=0;e+=r.length>=t.minLength?20:0;for(const d of Object.keys(n))e+=n[d]>=t["min"+d.charAt(0).toUpperCase()+d.slice(1)]?20:0;return s.verbose&&(console.info("validateStrength() » Password strength validated!"),console.info("validateStrength() » Check returned object for score/recommendations.")),{strengthScore:e,recommendations:a,isGood:80<=e}}}function validateOptions(e,r,s,t){const o=JSON.stringify(r,null,2).replace(/"([^"]+)":/g,"$1:").replace(/"/g,"'").replace(/\n\s*/g," "),n=Object.keys(r).join(", "),a=Object.keys(r).filter(e=>"boolean"==typeof r[e]),i=Object.keys(r).filter(e=>Number.isInteger(r[e])),l=(validateOptions.caller?.name||"validateOptions")+"() » ";var c=()=>{console.info(l+`Valid options: [ ${n} ]`),console.info(l+"If omitted, default settings are: "+o)},d=()=>{console.info(l+"For more help, please visit "+s)};if("object"!=typeof e)return console.error(l+"ERROR: [options] can only be an object of key/values."),console.info(l+"Example valid call: "+t),c(),d(),!1;for(const p in e){if(!Object.prototype.hasOwnProperty.call(r,p))return console.error(l+`ERROR: \`${p}\` is an invalid option.`),c(),d(),!1;if(a.includes(p)&&"boolean"!=typeof e[p])return console.error(l+`ERROR: [${p}] option can only be \`true\` or \`false\`.`),d(),!1;if(i.includes(p)&&(e[p]=parseInt(e[p],10),isNaN(e[p])||e[p]<1))return console.error(l+`ERROR: [${p}] option can only be an integer > 0.`),d(),!1}return!0}const apiFunctions={generatePassword:generatePassword,generatePasswords:generatePasswords,strictify:strictify,validateStrength:validateStrength};try{module.exports={...apiFunctions}}catch(e){}try{window.pw={...apiFunctions}}catch(e){}