let h;try{h=require("crypto").randomInt}catch(e){const t=window.crypto||window.msCrypto;h=(e,r)=>{var o=t?.getRandomValues(new Uint32Array(1))[0]/4294967295||Math.random();return Math.floor(o*(r-e))+e}}const w={lower:"abcdefghijklmnopqrstuvwxyz",upper:"ABCDEFGHIJKLMNOPQRSTUVWXYZ",numbers:"0123456789",symbols:"!@#$%^&*()-_=+[]{}/\\|;:'\",.<>?"};function g(t={}){const r={verbose:!0,length:8,qty:1,charset:"",exclude:"",numbers:!1,symbols:!1,lowercase:!0,uppercase:!0,strict:!1},e=JSON.stringify(r,null,2).replace(/"([^"]+)":/g,"$1:").replace(/"/g,"'").replace(/\n\s*/g," "),o=Object.keys(r).join(", "),s=Object.keys(r).filter(e=>"boolean"==typeof r[e]),n=Object.keys(r).filter(e=>Number.isInteger(r[e]));var a=()=>{console.info(`generatePassword() » Valid options: [ ${o} ]`),console.info("generatePassword() » If omitted, default settings are: "+e)};if("object"==typeof t){for(const f in t){if(!Object.prototype.hasOwnProperty.call(r,f))return console.error(`generatePassword() » ERROR: \`${f}\` is an invalid option.`),void a();if(s.includes(f)&&"boolean"!=typeof t[f])return console.error(`generatePassword() » ERROR: [${f}] option can only be \`true\` or \`false\`.`);if(n.includes(f)&&(t[f]=parseInt(t[f],10),isNaN(t[f])||t[f]<1))return console.error(`generatePassword() » ERROR: [${f}] option can only be \`true\` or \`false\`.`)}if(1<(t={...r,...t}).qty){const{qty:d,...p}=t;return u(d,p)}{var i,l="generatePasswords"===g.caller?.name;t.verbose&&!l&&console.info("generatePassword() » Initializing character set...");let r=t.charset||(t.numbers?w.numbers:"")+(t.symbols?w.symbols:"")+(t.lowercase?w.lower:"")+(t.uppercase?w.upper:""),o=(""===r&&(r=w.lower+w.upper),t.exclude&&(t.verbose&&!l&&console.info("generatePassword() » Removing excluded characters..."),r=r.replace(new RegExp(`[${t.exclude}]`,"g"),"")),t.verbose&&!l&&console.info("generatePassword() » Generating password..."),"");for(let e=0;e<t.length;e++){var c=h(0,r.length);o+=r.charAt(c)}return t.strict&&(t.verbose&&!l&&console.info("generatePassword() » Enforcing strict mode..."),i=["number","symbol","lower","upper"].filter(e=>t[e+"s"]||t[e+"case"]),o=y(o,i)),t.verbose&&!l&&(console.info("generatePassword() » Password generated!"),"undefined"==typeof require||require.main.filename.endsWith("cli.js")||console.info("generatePassword() » Check returned string.")),o}}console.error("generatePassword() » ERROR: [options] can only be an object of key/values."),console.info("generatePassword() » Example valid call: generatePassword({ verbose: false, numbers: true })"),a()}function u(r,o={}){const t={verbose:!0,length:8,charset:"",exclude:"",numbers:!1,symbols:!1,lowercase:!0,uppercase:!0,strict:!1};if(r=parseInt(r,10),isNaN(r)||r<1)return console.error("generatePasswords() » ERROR: 1st arg <qty> can only be an integer > 0.");const e=JSON.stringify(t,null,2).replace(/"([^"]+)":/g,"$1:").replace(/"/g,"'").replace(/\n\s*/g," "),s=Object.keys(t).join(", "),n=Object.keys(t).filter(e=>"boolean"==typeof t[e]),a=Object.keys(t).filter(e=>Number.isInteger(t[e]));var i=()=>{console.info(`generatePasswords() » Valid options: [ ${s} ]`),console.info("generatePasswords() » If omitted, default settings are: "+e)};if("object"==typeof o){for(const c in o){if(!Object.prototype.hasOwnProperty.call(t,c))return console.error(`generatePasswords() » ERROR: \`${c}\` is an invalid option.`),void i();if(n.includes(c)&&"boolean"!=typeof o[c])return console.error(`generatePassword() » ERROR: [${c}] option can only be \`true\` or \`false\`.`);if(a.includes(c)&&(o[c]=parseInt(o[c],10),isNaN(o[c])||o[c]<1))return console.error(`generatePassword() » ERROR: [${c}] option can only be an integer > 0.`)}(o={...t,...o}).verbose&&console.info(`generatePasswords() » Generating password${1<r?"s":""}...`);var l=[];for(let e=0;e<r;e++)l.push(g(o));return o.verbose&&console.info(`generatePasswords() » Password${1<r?"s":""} generated!`),"undefined"==typeof require||require.main.filename.endsWith("cli.js")||console.info("generatePasswords() » Check returned array."),l}console.error("generatePasswords() » ERROR: 2nd arg [options] can only be an object of key/values."),console.info("generatePasswords() » Example valid call: generatePasswords(3, { verbose: false, symbols: true })"),i()}function y(t,s=["number","symbol","lower","upper"],e={}){var n={verbose:!0};if("string"!=typeof t)return console.error("strictify() » ERROR: 1st arg <password> must be a string.");var r=["number","symbol","lower","upper"];for(const p of s=Array.isArray(s)?s:[s])if(!r.includes(p))return console.error(`strictify() » ERROR: 2nd arg \`${p}\` is an invalid character type.`),console.info(`strictify() » Valid character types: [ ${r.map(e=>`'${e}'`).join(", ")} ]`),void console.info("strictify() » Pass one as a string or more as an array, or all types will be required.");const o=JSON.stringify(n,null,2).replace(/"([^"]+)":/g,"$1:").replace(/"/g,"'").replace(/\n\s*/g," "),a=Object.keys(n).join(", ");var i=()=>{console.info(`strictify() » Valid options: [ ${a} ]`),console.info("strictify() » If omitted, default settings are: "+o)};if("object"==typeof e){for(const g in e){if(!Object.prototype.hasOwnProperty.call(n,g))return console.error(`strictify() » ERROR: \`${g}\` is an invalid option.`),void i();if("boolean"!=typeof e[g])return console.error(`strictify() » ERROR: [${g}] option can only be set to \`true\` or \`false\`.`)}e={...n,...e};var l={};for(const u of s)l["has"+u.charAt(0).toUpperCase()+u.slice(1)]=!1;for(let e=0;e<t.length;e++)for(const y of s)(w[y]||w[y+"s"]).includes(t.charAt(e))&&(l["has"+y.charAt(0).toUpperCase()+y.slice(1)]=!0);e.verbose&&console.info("strictify() » Strictifying password...");var c=Math.min(t.length,s.length),f=[];let r=0,o=t;for(const b of s)if(r<c&&!l["has"+b.charAt(0).toUpperCase()+b.slice(1)]){let e;for(;e=h(0,t.length),f.includes(e););f.push(e);var d=w[b]||w[b+"s"];o=o.substring(0,e)+d.charAt(h(0,d.length))+o.substring(e+1),r++}return e.verbose&&(0<r?(console.info("strictify() » Password is now strict!"),console.info("strictify() » Check returned string.")):(console.info(`strictify() » Password already includes ${s.join(" + ")} characters!`),console.info("strictify() » No modifications made."))),o}console.error("strictify() » ERROR: 3rd arg [options] can only be an object of key/values."),console.info("strictify() » Example valid call: strictify('pa55word', ['symbol', 'upper'], { verbose: false })"),i()}function e(r,o={}){var t={minLength:8,minLower:1,minUpper:1,minNumber:1,minSymbol:1},s={verbose:!0};if("string"!=typeof r)return console.error("validateStrength() » ERROR: 1st arg <password> must be a string.");const e=JSON.stringify(s,null,2).replace(/"([^"]+)":/g,"$1:").replace(/"/g,"'").replace(/\n\s*/g," "),n=Object.keys(s).join(", ");var a=()=>{console.info(`validateStrength() » Valid options: [ ${n} ]`),console.info("validateStrength() » If omitted, default settings are: "+e)};if("object"==typeof o){for(const c in o){if(!Object.prototype.hasOwnProperty.call(s,c))return console.error(`validateStrength() » ERROR: \`${c}\` is an invalid option.`),void a();if("boolean"!=typeof o[c])return console.error(`validateStrength() » ERROR: [${c}] option can only be set to \`true\` or \`false\`.`)}(o={...s,...o}).verbose&&console.info("validateStrength() » Validating password strength...");var i={lower:0,upper:0,number:0,symbol:0};for(const f of r)for(const d of Object.keys(i))(w[d]||w[d+"s"]).includes(f)&&i[d]++;var l=[];r.length<t.minLength&&l.push(`Make it at least ${t.minLength} characters long.`);for(const p of Object.keys(i))i[p]<t["min"+p.charAt(0).toUpperCase()+p.slice(1)]&&l.push("Include at least one "+p+`${["upper","lower"].includes(p)?"case letter":""}.`);let e=0;e+=r.length>=t.minLength?20:0;for(const g of Object.keys(i))e+=i[g]>=t["min"+g.charAt(0).toUpperCase()+g.slice(1)]?20:0;return o.verbose&&(console.info("validateStrength() » Password strength validated!"),console.info("validateStrength() » Check returned object for score/recommendations.")),{strengthScore:e,recommendations:l,isGood:80<=e}}console.error("validateStrength() » ERROR: 2nd arg [options] can only be an object of key/values."),console.info("validateStrength() » Example valid call: validateStrength('pa55word', { verbose: false })"),a()}const r={generatePassword:g,generatePasswords:u,strictify:y,validateStrength:e};try{module.exports={...r}}catch(e){}try{window.pw={...r}}catch(e){}