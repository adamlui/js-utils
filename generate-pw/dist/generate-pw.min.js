let p;try{p=require("crypto").randomInt}catch(e){const s=window.crypto||window.msCrypto;p=(e,r)=>{var o=s?.getRandomValues(new Uint32Array(1))[0]/4294967295||Math.random();return Math.floor(o*(r-e))+e}}const g={lower:"abcdefghijklmnopqrstuvwxyz",upper:"ABCDEFGHIJKLMNOPQRSTUVWXYZ",numbers:"0123456789",symbols:"!@#$%^&*()-_=+[]{}/\\|;:'\",.<>?"};function a(s={}){var e={verbose:!0,length:8,qty:1,charset:"",exclude:"",numbers:!1,symbols:!1,lowercase:!0,uppercase:!0,strict:!1};if(b(s,e,"generatePassword({ verbose: false, numbers: true })")){if(1<(s={...e,...s}).qty){const{qty:r,...o}=s;return i(r,o)}{var t,e="generatePasswords"===a.caller?.name;s.verbose&&!e&&console.info("generatePassword() » Initializing character set...");let r=s.charset||(s.numbers?g.numbers:"")+(s.symbols?g.symbols:"")+(s.lowercase?g.lower:"")+(s.uppercase?g.upper:""),o=(""===r&&(r=g.lower+g.upper),s.exclude&&(s.verbose&&!e&&console.info("generatePassword() » Removing excluded characters..."),r=r.replace(new RegExp(`[${s.exclude}]`,"g"),"")),s.verbose&&!e&&console.info("generatePassword() » Generating password..."),"");for(let e=0;e<s.length;e++){var n=p(0,r.length);o+=r.charAt(n)}return s.strict&&(s.verbose&&!e&&console.info("generatePassword() » Enforcing strict mode..."),t=["number","symbol","lower","upper"].filter(e=>s[e+"s"]||s[e+"case"]),o=c(o,t)),s.verbose&&!e&&(console.info("generatePassword() » Password generated!"),"undefined"==typeof require||require.main.filename.endsWith("cli.js")||console.info("generatePassword() » Check returned string.")),o}}}function i(r,o={}){var e={verbose:!0,length:8,charset:"",exclude:"",numbers:!1,symbols:!1,lowercase:!0,uppercase:!0,strict:!1};if(r=parseInt(r,10),isNaN(r)||r<1)return console.error("generatePasswords() » ERROR: 1st arg <qty> can only be an integer > 0.");if(b(o,e,"generatePasswords(3, { verbose: false, symbols: true })")){(o={...e,...o}).verbose&&console.info(`generatePasswords() » Generating password${1<r?"s":""}...`);var s=[];for(let e=0;e<r;e++)s.push(a(o));return o.verbose&&console.info(`generatePasswords() » Password${1<r?"s":""} generated!`),"undefined"==typeof require||require.main.filename.endsWith("cli.js")||console.info("generatePasswords() » Check returned array."),s}}function c(s,t=["number","symbol","lower","upper"],e={}){var n={verbose:!0};if("string"!=typeof s)return console.error("strictify() » ERROR: 1st arg <password> must be a string.");var r=["number","symbol","lower","upper"];for(const o of t=Array.isArray(t)?t:[t])if(!r.includes(o))return console.error(`strictify() » ERROR: 2nd arg \`${o}\` is an invalid character type.`),console.info(`strictify() » Valid character types: [ ${r.map(e=>`'${e}'`).join(", ")} ]`),void console.info("strictify() » Pass one as a string or more as an array, or all types will be required.");if(b(e,n,"strictify('pa55word', ['symbol', 'upper'], { verbose: false })")){e={...n,...e};var a={};for(const f of t)a["has"+f.charAt(0).toUpperCase()+f.slice(1)]=!1;for(let e=0;e<s.length;e++)for(const d of t)(g[d]||g[d+"s"]).includes(s.charAt(e))&&(a["has"+d.charAt(0).toUpperCase()+d.slice(1)]=!0);e.verbose&&console.info("strictify() » Strictifying password...");var i=Math.min(s.length,t.length),c=[];let r=0,o=s;for(const u of t)if(r<i&&!a["has"+u.charAt(0).toUpperCase()+u.slice(1)]){let e;for(;e=p(0,s.length),c.includes(e););c.push(e);var l=g[u]||g[u+"s"];o=o.substring(0,e)+l.charAt(p(0,l.length))+o.substring(e+1),r++}return e.verbose&&(0<r?(console.info("strictify() » Password is now strict!"),console.info("strictify() » Check returned string.")):(console.info(`strictify() » Password already includes ${t.join(" + ")} characters!`),console.info("strictify() » No modifications made."))),o}}function e(r,o={}){var s={minLength:8,minLower:1,minUpper:1,minNumber:1,minSymbol:1},t={verbose:!0};if("string"!=typeof r)return console.error("validateStrength() » ERROR: 1st arg <password> must be a string.");if(b(o,t,"validateStrength('pa55word', { verbose: false })")){(o={...t,...o}).verbose&&console.info("validateStrength() » Validating password strength...");var n={lower:0,upper:0,number:0,symbol:0};for(const i of r)for(const c of Object.keys(n))(g[c]||g[c+"s"]).includes(i)&&n[c]++;var a=[];r.length<s.minLength&&a.push(`Make it at least ${s.minLength} characters long.`);for(const l of Object.keys(n))n[l]<s["min"+l.charAt(0).toUpperCase()+l.slice(1)]&&a.push("Include at least one "+l+`${["upper","lower"].includes(l)?"case letter":""}.`);let e=0;e+=r.length>=s.minLength?20:0;for(const f of Object.keys(n))e+=n[f]>=s["min"+f.charAt(0).toUpperCase()+f.slice(1)]?20:0;return o.verbose&&(console.info("validateStrength() » Password strength validated!"),console.info("validateStrength() » Check returned object for score/recommendations.")),{strengthScore:e,recommendations:a,isGood:80<=e}}}function b(e,r,o){const s=(b.caller?.name||"validateOptions")+"() » ",t=JSON.stringify(r,null,2).replace(/"([^"]+)":/g,"$1:").replace(/"/g,"'").replace(/\n\s*/g," "),n=Object.keys(r).join(", "),a=Object.keys(r).filter(e=>"boolean"==typeof r[e]),i=Object.keys(r).filter(e=>Number.isInteger(r[e]));var c=()=>{console.info(s+`Valid options: [ ${n} ]`),console.info(s+"If omitted, default settings are: "+t)};if("object"!=typeof e)return console.error(s+"ERROR: [options] can only be an object of key/values."),console.info(s+"Example valid call: "+o),c(),!1;for(const l in e){if(!Object.prototype.hasOwnProperty.call(r,l))return console.error(s+`ERROR: \`${l}\` is an invalid option.`),c(),!1;if(a.includes(l)&&"boolean"!=typeof e[l])return console.error(s+`ERROR: [${l}] option can only be \`true\` or \`false\`.`),!1;if(i.includes(l)&&(e[l]=parseInt(e[l],10),isNaN(e[l])||e[l]<1))return console.error(s+`ERROR: [${l}] option can only be an integer > 0.`),!1}return!0}const r={generatePassword:a,generatePasswords:i,strictify:c,validateStrength:e};try{module.exports={...r}}catch(e){}try{window.pw={...r}}catch(e){}