#!/usr/bin/env node
const r="generate-pw",e="https://github.com/adamlui/js-utils/tree/main/generate-pw#-command-line-usage",s=require(__dirname.match(/src/)?"./generate-pw":"./generate-pw.min")["generatePassword"],o=require("fs"),n=require("path"),t=require("child_process")["execSync"],a="[0m",l="[1;91m",c="[1;33m",i={},p={paramOptions:{length:/^--?length(?:=.*|$)/,qty:/^--?qu?a?n?ti?t?y(?:=.*|$)/,charset:/^--?chars(?:=.*|$)/,excludeChars:/^--?exclude(?:=.*|$)/},flags:{includeNums:/^--?(?:n|(?:include-?)?num(?:ber)?s?=?(?:true|1)?)$/,includeSymbols:/^--?(?:s|(?:include-?)?symbols?=?(?:true|1)?)$/,excludeLowerChars:/^--?(?:L|(?:exclude|disable|no)-?lower-?(?:case)?|lower-?(?:case)?=(?:false|0))$/,excludeUpperChars:/^--?(?:U|(?:exclude|disable|no)-?upper-?(?:case)?|upper-?(?:case)?=(?:false|0))$/,strictMode:/^--?s(?:trict)?(?:-?mode)?$/,quietMode:/^--?q(?:uiet)?(?:-?mode)?$/},infoCmds:{help:/^--?h(?:elp)?$/,version:/^--?ve?r?s?i?o?n?$/}};if(process.argv.forEach(s=>{var e,r,o;s.startsWith("-")&&(e=Object.keys(p.paramOptions).find(e=>p.paramOptions[e].test(s)),o=Object.keys(p.flags).find(e=>p.flags[e].test(s)),r=Object.keys(p.infoCmds).find(e=>p.infoCmds[e].test(s)),o?i[o]=!0:e?(s.includes("=")||(console.error(`
${l}ERROR: Arg [--${s.replace(/-/g,"")}] requires '=' followed by a value.`+a),m(),process.exit(1)),o=s.split("=")[1],i[e]=parseInt(o)||o):r||(console.error(`
${l}ERROR: Arg [${s}] not recognized.`+a),console.info(`
${c}Valid arguments are below.`+a),d(["paramOptions","flags","infoCmds"]),m(),process.exit(1)))}),process.argv.some(e=>p.infoCmds.help.test(e)))d();else if(process.argv.some(e=>p.infoCmds.version.test(e))){const h=t(`npm view ${r} version`).toString().trim()||"none";let e,s=process.cwd();for(;"/"!==s;){const f=n.join(s,"package.json");if(o.existsSync(f)){const g=require(f);e=(g.dependencies?.[r]||g.devDependencies?.[r])?.match(/(\d+\.\d+\.\d+)/)[0]||"none";break}s=n.dirname(s)}console.info(`
Global version: `+h),console.info("Local version: "+e)}else{for(const y of["length","qty"])i[y]&&(isNaN(i[y])||i[y]<1)&&(console.error(`
${l}Error: [${y}] argument can only be > 0.`+a),m(),process.exit(1));const w={length:i.length||8,qty:i.qty||1,charset:i.charset,exclude:i.excludeChars,numbers:!!i.includeNums,symbols:!!i.includeSymbols,lowercase:!i.excludeLowerChars,uppercase:!i.excludeUpperChars,strict:!!i.strictMode,verbose:!i.quietMode},b=s(w);i.quietMode||console.info("\nCopying to clipboard..."),u(Array.isArray(b)?b.join("\n"):b)}function d(e=["cmdFormat","paramOptions","flags","infoCmds"]){const s={cmdFormat:[`
${c}generate-pw [options|commands]`+a],paramOptions:["\nParameter options:"," --length=n                  Generate password(s) of n length."," --qty=n                     Generate n password(s)."," --charset=chars             Only include chars in password(s)."," --exclude=chars             Exclude chars from password(s)."],flags:["\nBoolean options:"," -n, --include-numbers       Allow numbers in password(s)."," -s, --include-symbols       Allow symbols in password(s)."," -L, --no-lowercase          Disallow lowercase letters in password(s)."," -U, --no-uppercase          Disallow uppercase letters in password(s)."," -s, --strict                Require at least one character from each allowed character set in password(s)."," -q, --quiet                 Suppress all logging except errors."],infoCmds:["\nInfo commands:"," -h, --help                  Display help screen."," -v, --version               Show version number."]};e.forEach(e=>{s[e]?.forEach(e=>{{const o=process.stdout.columns||80,n=[],s=e.match(/\S+|\s+/g);let r="";s.forEach(e=>{var s=o-(0===n.length?0:29);r.length+e.length>s&&(n.push(0===n.length?r:r.trimStart()),r=""),r+=e}),n.push(0===n.length?r:r.trimStart()),n.forEach((e,s)=>console.info(0===s?e:" ".repeat(29)+e))}})})}function m(){console.info(`
${c}For more help, type 'generate-pw --help' or visit
`+(e+a))}function u(e){e=e.replace(/\s+$/m,"").replace(/"/g,'""'),"darwin"===process.platform?t(`printf "${e}" | pbcopy`):"linux"===process.platform?t(`printf "${e}" | xclip -selection clipboard`):"win32"===process.platform&&t(`Set-Clipboard -Value "${e}"`,{shell:"powershell"})}