#!/usr/bin/env node
const e=require(__dirname.match(/src/)?"./generate-pw":"./generate-pw.min")["generatePassword"],s=require("child_process")["execSync"],n="[0m",a="[1;91m",t="[1;33m",l={},c={paramOptions:{length:/^--?length/,qty:/^--?qu?a?n?ti?t?y=.*$/,charset:/^--?chars/,excludeChars:/^--?exclude=/},flags:{includeNums:/^--?(?:n|(?:include-?)?num(?:ber)?s?=?(?:true|1)?)$/,includeSymbols:/^--?(?:s|(?:include-?)?symbols?=?(?:true|1)?)$/,excludeLowerChars:/^--?(?:L|(?:exclude|disable|no)-?lower-?(?:case)?|lower-?(?:case)?=(?:false|0))$/,excludeUpperChars:/^--?(?:U|(?:exclude|disable|no)-?upper-?(?:case)?|upper-?(?:case)?=(?:false|0))$/,strictMode:/^--?s(?:trict)?(?:-?mode)?$/,quietMode:/^--?q(?:uiet)?(?:-?mode)?$/},infoCmds:{help:/^--?h(?:elp)?$/,version:/^--?ve?r?s?i?o?n?$/}};if(process.argv.forEach(s=>{var e,r,o;s.startsWith("-")&&(e=Object.keys(c.paramOptions).find(e=>c.paramOptions[e].test(s)),o=Object.keys(c.flags).find(e=>c.flags[e].test(s)),r=Object.keys(c.infoCmds).find(e=>c.infoCmds[e].test(s)),o?l[o]=!0:e?(o=s.split("=")[1],l[e]=parseInt(o)||o):r||(console.error(`
${a}ERROR: Arg [${s}] not recognized.`+n),console.info(`
${t}Valid arguments are below.`+n),i(["paramOptions","flags","infoCmds"]),process.exit(1)))}),process.argv.some(e=>c.infoCmds.help.test(e)))i();else if(process.argv.some(e=>c.infoCmds.version.test(e)))console.info("v"+require("./package.json").version);else{for(const d of["length","qty"])l[d]&&(isNaN(l[d])||l[d]<1)&&(console.error(`
${a}Error: [${d}] argument can only be > 0.`+n),process.exit(1));const o={length:l.length||8,qty:l.qty||1,charset:l.charset,exclude:l.excludeChars,numbers:!!l.includeNums,symbols:!!l.includeSymbols,lowercase:!l.excludeLowerChars,uppercase:!l.excludeUpperChars,strict:!!l.strictMode,verbose:!l.quietMode},p=e(o);l.quietMode||console.info("\nCopying to clipboard..."),r(Array.isArray(p)?p.join("\n"):p)}function i(e=["cmdFormat","paramOptions","flags","infoCmds"]){const s={cmdFormat:[`
${t}generate-pw [options|commands]`+n],paramOptions:["\nParameter options:"," --length=n                  Generate password(s) of n length."," --qty=n                     Generate n password(s)."," --charset=chars             Only include chars in password(s)."," --exclude=chars             Exclude chars from password(s)."],flags:["\nBoolean options:"," -n, --include-numbers       Allow numbers in password(s)."," -s, --include-symbols       Allow symbols in password(s)."," -L, --no-lowercase          Disallow lowercase letters in password(s)."," -U, --no-uppercase          Disallow uppercase letters in password(s)."," -s, --strict                Require at least one character from each allowed character set in password(s)."," -q, --quiet                 Suppress all logging except errors."],infoCmds:["\nInfo commands:"," -h, --help                  Display help screen."," -v, --version               Show version number."]};e.forEach(e=>{s[e]?.forEach(e=>{{const o=process.stdout.columns||80,n=[],s=e.match(/\S+|\s+/g);let r="";s.forEach(e=>{var s=o-(0===n.length?0:29);r.length+e.length>s&&(n.push(0===n.length?r:r.trimStart()),r=""),r+=e}),n.push(0===n.length?r:r.trimStart()),n.forEach((e,s)=>console.info(0===s?e:" ".repeat(29)+e))}})})}function r(e){e=e.replace(/\s+$/m,"").replace(/"/g,'""'),"darwin"===process.platform?s(`printf "${e}" | pbcopy`):"linux"===process.platform?s(`printf "${e}" | xclip -selection clipboard`):"win32"===process.platform&&s(`Set-Clipboard -Value "${e}"`,{shell:"powershell"})}