#!/usr/bin/env node
/**
 *  Â© 2024 Adam Lui & contributors under the MIT license.
 *  Source: https://code.js-utils.com/scss-to-css
 *  Documentation: https://docs.js-utils.com/scss-to-css
 */
const pkgName="@adamlui/scss-to-css",docURL="https://docs.js-utils.com/scss-to-css/#-command-line-usage",scssToCSS=require(__dirname.match(/src/)?"./scss-to-css":"./scss-to-css.min"),fs=require("fs"),path=require("path"),execSync=require("child_process")["execSync"],nc="[0m",br="[1;91m",by="[1;33m",bg="[1;92m",config={},argRegex={dryRun:/^--?(?:n|dry-?run)$/,includeDotFolders:/^--?(?:dd?|(?:include-?)?dot-?(?:folder|dir(?:ector(?:y|ie))?)s?=?(?:true|1)?)$/,noSourceMaps:/^--?(?:S|(?:exclude|disable|no)-?so?u?rce?-?maps?|so?u?rce?-?maps?=(?:false|0))$/,noRecursion:/^--?(?:R|(?:disable|no)-?recursi(?:on|ve)|recursi(?:on|ve)=(?:false|0))$/,noMinify:/^--?(?:M|(?:disable|no)-?minif(?:y|ication)|minif(?:y|ication)=(?:false|0))$/,quietMode:/^--?q(?:uiet)?(?:-?mode)?$/,help:/^--?h(?:elp)?$/,version:/^--?ve?r?s?i?o?n?$/};if(process.argv.forEach(s=>{var e;s.startsWith("-")&&((e=Object.keys(argRegex).find(e=>argRegex[e].test(s)))?config[e]=!0:(console.error(`
${br}ERROR: Arg [${s}] not recognized.`+nc),console.info(`
${by}Valid arguments are below.`+nc),printHelpSections(["configOptions","infoCmds"]),printHelpCmdAndDocURL(),process.exit(1)))}),process.argv.some(e=>argRegex.help.test(e)))printHelpSections();else if(process.argv.some(e=>argRegex.version.test(e))){const f=execSync(`npm view ${pkgName} version`).toString().trim()||"none";let e,s=process.cwd();for(;"/"!=s;){const i=path.join(s,"package.json");if(fs.existsSync(i)){const j=require(i);e=(j.dependencies?.[pkgName]||j.devDependencies?.[pkgName])?.match(/(\d+\.\d+\.\d+)/)[0]||"none";break}s=path.dirname(s)}console.info(`
Global version: `+f),console.info("Local version: "+e)}else{const[k="",l=""]=process.argv.slice(2).filter(e=>!e.startsWith("-")).map(e=>e.replace(/^\/*/,"")),m=path.resolve(process.cwd(),k),n=(k&&!fs.existsSync(m)&&(console.error(`
${br}Error: First argument can only be an existing file or directory.`+`
'${m}' does not exist.`+nc+`

${bg}Example valid command: 
Â» scss-to-css . output.min.css`+nc),printHelpCmdAndDocURL(),process.exit(1)),k.endsWith(".scss")?[m]:scssToCSS.findSCSS(m,{recursive:!config.noRecursion,verbose:!config.quietMode}));if(config.dryRun)0<n.length?(console.info(`
${by}SCSS files to be compiled:`+nc),n.forEach(e=>console.info(e))):console.info(by+`
No SCSS files will be compiled.`+nc);else{const r=[],s=n.map(e=>{var s=scssToCSS.compile(e,{minify:!config.noMinify,sourceMaps:!config.noSourceMaps,verbose:!config.quietMode});return s.error&&r.push(e),s}).filter(e=>!e.error);if(s?.forEach(({code:e,srcMap:s,srcPath:o})=>{var n=path.join(path.dirname(o),/(?:src|s[ac]ss)$/.test(path.dirname(o))?"../"+(l||"css"):l.endsWith(".css")?path.dirname(l):l||"css"),o=(l.endsWith(".css")&&k.endsWith(".scss")?path.basename(l).replace(/(\.min)?\.css$/,""):path.basename(o,".scss"))+".min.css",o=path.join(n,o);fs.existsSync(n)||fs.mkdirSync(n,{recursive:!0}),fs.writeFileSync(o,e,"utf8"),config.noSourceMaps||fs.writeFileSync(o+".map",JSON.stringify(s),"utf8")}),0<s?.length){const C=1<s.length?"s":"";printIfNotQuiet(`
${bg}Compilation complete!`+nc),printIfNotQuiet(s.length+" CSS file"+C+(config.noSourceMaps?"":` + ${s.length} source map`+C)+" generated.")}else printIfNotQuiet(by+"No SCSS files processed."+nc);0<r.length&&(printIfNotQuiet(`
`+br+r.length+" file"+(1<r.length?"s":"")+" failed to compile:"+nc),r.forEach(e=>printIfNotQuiet(e)))}}function printHelpSections(e=["cmdFormat","pathArgs","configOptions","infoCmds"]){const s={cmdFormat:[`
${by}scss-to-css [inputPath] [outputPath] [options]`+nc],pathArgs:["\nPath arguments:"," [inputPath]                 Path to SCSS file or directory containing SCSS files to be compiled, relative to the current working directory."," [outputPath]                Path to file or directory where CSS + sourcemap files will be stored, relative to original file location (if not provided, css/ is used)."],configOptions:["\nConfig options:"," -n, --dry-run                Don't actually compile the file(s), just show if they will be processed."," -d, --include-dotfolders     Include dotfolders in file search."," -S, --no-source-maps         Prevent source maps from being generated."," -M, --no-minify              Disable minification of output CSS."," -R, --no-recursion           Disable recursive file searching."," -q, --quiet                  Suppress all logging except errors."],infoCmds:["\nInfo commands:"," -h, --help                   Display help screen."," -v, --version                Show version number."]};e.forEach(e=>{s[e]?.forEach(e=>{{const n=process.stdout.columns||80,i=[],s=e.match(/\S+|\s+/g);let o="";s.forEach(e=>{var s=n-(0==i.length?0:30);o.length+e.length>s&&(i.push(0==i.length?o:o.trimStart()),o=""),o+=e}),i.push(0==i.length?o:o.trimStart()),i.forEach((e,s)=>console.info(0==s?e:" ".repeat(30)+e))}})})}function printHelpCmdAndDocURL(){console.info(`
${by}For more help, type 'scss-to-css --help' or visit
`+(docURL+nc))}function printIfNotQuiet(e){config.quietMode||console.info(e)}