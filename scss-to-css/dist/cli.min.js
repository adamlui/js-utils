#!/usr/bin/env node
const e="https://github.com/adamlui/js-utils/tree/main/scss-to-css#-command-line-usage",r=require("fs"),n=require("path"),o=require(__dirname.match(/src/)?"./scss-to-css":"./scss-to-css.min"),i="[0m",t="[1;91m",c="[1;33m",s="[1;92m",l={},a={dryRun:/^--?(?:n|dry-?run)$/,includeDotFolders:/^--?(?:dd?|(?:include-?)?dot-?(?:folder|dir(?:ector(?:y|ie))?)s?=?(?:true|1)?)$/,noSourceMaps:/^--?(?:S|(?:exclude|disable|no)-?so?u?rce?-?maps?|so?u?rce?-?maps?=(?:false|0))$/,noRecursion:/^--?(?:R|(?:disable|no)-?recursi(?:on|ve)|recursi(?:on|ve)=(?:false|0))$/,noMinify:/^--?(?:M|(?:disable|no)-?minif(?:y|ication)|minif(?:y|ication)=(?:false|0))$/,quietMode:/^--?q(?:uiet)?(?:-?mode)?$/,help:/^--?h(?:elp)?$/,version:/^--?ve?r?s?i?o?n?$/};if(process.argv.forEach(s=>{var e;s.startsWith("-")&&((e=Object.keys(a).find(e=>a[e].test(s)))?l[e]=!0:(console.error(`
${t}ERROR: Arg [${s}] not recognized.`+i),console.info(`
${c}Valid arguments are below.`+i),u(["configOptions","infoCmds"]),d(),process.exit(1)))}),process.argv.some(e=>a.help.test(e)))u();else if(process.argv.some(e=>a.version.test(e)))console.info("v"+require("./package.json").version);else{const[p="",m=""]=process.argv.slice(2).filter(e=>!e.startsWith("-")).map(e=>e.replace(/^\/*/,"")),h=n.resolve(process.cwd(),p),g=(p&&!r.existsSync(h)&&(console.error(`
${t}Error: First argument can only be an existing file or directory.`+`
'${h}' does not exist.`+i+`

${s}Example valid command: 
Â» scss-to-css . output.min.css`+i),d(),process.exit(1)),p.endsWith(".scss")?[h]:o.findSCSS(h,{recursive:!l.noRecursion,verbose:!l.quietMode}));if(l.dryRun)0<g.length?(console.info(`
${c}SCSS files to be compiled:`+i),g.forEach(e=>console.info(e))):console.info(c+`
No SCSS files will be compiled.`+i);else{const S=[],v=g.map(e=>{var s=o.compile(e,{minify:!l.noMinify,sourceMaps:!l.noSourceMaps,verbose:!l.quietMode});return s.error&&S.push(e),s}).filter(e=>!e.error);if(v?.forEach(({code:e,srcMap:s,srcPath:o})=>{var i=n.join(n.dirname(o),/(?:src|s[ac]ss)$/.test(n.dirname(o))?"../"+(m||"css"):m.endsWith(".css")?n.dirname(m):m||"css"),o=(m.endsWith(".css")&&p.endsWith(".scss")?n.basename(m).replace(/(\.min)?\.css$/,""):n.basename(o,".scss"))+".min.css",o=n.join(i,o);r.existsSync(i)||r.mkdirSync(i,{recursive:!0}),r.writeFileSync(o,e,"utf8"),l.noSourceMaps||r.writeFileSync(o+".map",JSON.stringify(s),"utf8")}),0<v?.length){const y=1<v.length?"s":"";f(`
${s}Compilation complete!`+i),f(v.length+" CSS file"+y+(l.noSourceMaps?"":` + ${v.length} source map`+y)+" generated.")}else f(c+"No SCSS files processed."+i);0<S.length&&(f(`
`+t+S.length+" file"+(1<S.length?"s":"")+" failed to compile:"+i),S.forEach(e=>f(e)))}}function u(e=["cmdFormat","pathArgs","configOptions","infoCmds"]){const s={cmdFormat:[`
${c}scss-to-css [inputPath] [outputPath] [options]`+i],pathArgs:["\nPath arguments:"," [inputPath]                 Path to SCSS file or directory containing SCSS files to be compiled, relative to the current working directory."," [outputPath]                Path to file or directory where CSS + sourcemap files will be stored, relative to original file location (if not provided, css/ is used)."],configOptions:["\nConfig options:"," -n, --dry-run                Don't actually compile the file(s), just show if they will be processed."," -d, --include-dotfolders     Include dotfolders in file search."," -S, --no-source-maps         Prevent source maps from being generated."," -M, --no-minify              Disable minification of output CSS."," -R, --no-recursion           Disable recursive file searching."," -q, --quiet                  Suppress all logging except errors."],infoCmds:["\nInfo commands:"," -h, --help                   Display help screen."," -v, --version                Show version number."]};e.forEach(e=>{s[e]?.forEach(e=>{{const i=process.stdout.columns||80,r=[],s=e.match(/\S+|\s+/g);let o="";s.forEach(e=>{var s=i-(0===r.length?0:30);o.length+e.length>s&&(r.push(0===r.length?o:o.trimStart()),o=""),o+=e}),r.push(0===r.length?o:o.trimStart()),r.forEach((e,s)=>console.info(0===s?e:" ".repeat(30)+e))}})})}function d(){console.info(`
${c}For more help, type 'scss-to-css --help' or visit
`+(e+i))}function f(e){l.quietMode||console.info(e)}