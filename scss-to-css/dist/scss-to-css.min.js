const c=require("fs"),l=require("path"),t=require("sass");function a(o,s={}){var e={recursive:!0,verbose:!0,dotFolders:!1};if(s={...e,...s},"string"!=typeof o)return console.error("findSCSS() » ERROR: 1st arg <searchDir> must be a string.");var r=l.resolve(process.cwd(),o);if(!c.existsSync(r))return console.error("findSCSS() » ERROR: 1st arg <searchDir> must be an existing directory.\n"+`findSCSS() » ${r} does not exist.`);for(const t in s)if(!Object.prototype.hasOwnProperty.call(e,t)){if("isRecursing"!==t)return console.error(`findSCSS() » ERROR: \`${t}\` is an invalid option.
`+`findSCSS() » Valid options: [ ${Object.keys(e).join(", ")} ]`);if("boolean"!=typeof s[t])return console.error(`findSCSS() » ERROR: [${t}] option can only be set to \`true\` or \`false\`.`)}const i=c.readdirSync(o),n=[];return s.verbose&&!s.isRecursing&&console.info("\nfindSCSS() » Searching for SCSS files..."),i.forEach(e=>{var r=l.resolve(o,e);c.statSync(r).isDirectory()&&"node_modules"!=e&&(s.dotFolders||!e.startsWith("."))&&s.recursive?n.push(...a(r,{...s,isRecursing:!0})):e.endsWith(".scss")&&n.push(r)}),!s.isRecursing&&s.verbose&&console.info("findSCSS() » Search complete! "+(0===n.length?"No":n.length)+` file${1<n.length?"s":""} found.`+("compile"===a.caller.name||require.main.filename.endsWith("cli.js")?"":"\nfindSCSS() » Check returned array.")),s.isRecursing||0<n.length?n:[]}function e(e,o={}){var r={recursive:!0,verbose:!0,dotFolders:!1,minify:!0,sourceMaps:!0};if(o={...r,...o},"string"!=typeof e)return console.error("compile() » ERROR: 1st arg <inputPath> must be a string.");if(e=l.resolve(process.cwd(),e),!c.existsSync(e))return console.error("compile() » ERROR: 1st arg <inputPath> must be an existing directory or file.\n"+`compile() » ${e} does not exist.`);for(const n in o){if(!Object.prototype.hasOwnProperty.call(r,n))return console.error(`compile() » ERROR: \`${n}\` is an invalid option.
`+`compile() » Valid options: [ ${Object.keys(r).join(", ")} ]`);if("boolean"!=typeof o[n])return console.error(`compile() » ERROR: [${n}] option can only be set to \`true\` or \`false\`.`)}const s={style:o.minify?"compressed":"expanded",sourceMap:o.sourceMaps};if(c.existsSync(e)){if(!e.endsWith(".scss"))return a(e,{recursive:o.recursive,verbose:o.verbose,dotFolders:o.dotFolders})?.map(e=>{o.verbose&&console.info(`compile() » Compiling ${e}...`);try{var r=t.compile(e,s);return{code:r.css,srcMap:r.sourceMap,srcPath:e}}catch(e){return console.error(`
compile() » ERROR: ${e.message}
`),{error:e}}}).filter(e=>!e.error);o.verbose&&console.info(`compile() » Compiling ${e}...`);try{var i=t.compile(e,s);return{code:i.css,srcMap:i.sourceMap,srcPath:l.resolve(process.cwd(),e)}}catch(e){return console.error(`
compile() » ERROR: ${e.message}
`),{error:e}}}}module.exports={compile:e,findSCSS:a};