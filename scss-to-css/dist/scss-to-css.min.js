#!/usr/bin/env node
const c=require("fs"),l=require("path"),t=require("sass");function a(s,r={}){var e="https://github.com/adamlui/js-utils/tree/main/scss-to-css#findscsssearchdir-options",o={recursive:!0,verbose:!0,dotFolders:!1};if("string"!=typeof s)console.error("findSCSS() » ERROR: 1st arg <searchDir> must be a string."),console.info("findSCSS() » For more help, please visit "+e);else{var i=l.resolve(process.cwd(),s);if(c.existsSync(i)){if(u(r,o,e,"findSCSS('assets/scss', { verbose: false, dotFolders: true })")){r={...o,...r};const n=c.readdirSync(s),t=[];return r.verbose&&!r.isRecursing&&console.info("findSCSS() » Searching for SCSS files..."),n.forEach(e=>{var o=l.resolve(s,e);c.statSync(o).isDirectory()&&"node_modules"!=e&&(r.dotFolders||!e.startsWith("."))&&r.recursive?t.push(...a(o,{...r,isRecursing:!0})):e.endsWith(".scss")&&t.push(o)}),!r.isRecursing&&r.verbose&&(console.info("findSCSS() » Search complete! "+(0===t.length?"No":t.length)+` file${0==t.length||1<t.length?"s":""} found.`),"compile"===a.caller.name||/cli(?:\.min)?\.js$/.test(require.main.filename)||console.info("findSCSS() » Check returned array.")),r.isRecursing||0<t.length?t:[]}}else console.error("findSCSS() » ERROR: 1st arg <searchDir> must be an existing directory."),console.error(`findSCSS() » ${i} does not exist.`),console.info("findSCSS() » For more help, please visit "+e)}}function e(e,s={}){var o="https://github.com/adamlui/js-utils/tree/main/scss-to-css#compileinputpath-options",r={recursive:!0,verbose:!0,dotFolders:!1,minify:!0,sourceMaps:!0};if("string"!=typeof e)console.error("compile() » ERROR: 1st arg <inputPath> must be a string."),console.info("compile() » For more help, please visit "+o);else if(e=l.resolve(process.cwd(),e),c.existsSync(e)){if(u(s,r,o,"compile('assets/scss', { recursive: false, minify: false })")){const n={style:(s={...r,...s}).minify?"compressed":"expanded",sourceMap:s.sourceMaps};if(c.existsSync(e)){if(!e.endsWith(".scss"))return r=a(e,{recursive:s.recursive,verbose:s.verbose,dotFolders:s.dotFolders})?.map(e=>{s.verbose&&console.info(`compile() » Compiling ${e}...`);try{var o=t.compile(e,n);return{code:o.css,srcMap:o.sourceMap,srcPath:e}}catch(e){return console.error(`
compile() » ERROR: ${e.message}
`),{error:e}}}).filter(e=>!e.error),s.verbose&&(0<r.length?console.info("compile() » Compilation complete. Check returned object."):console.info("compile() » No SCSS files processed.")),r;s.verbose&&console.info(`compile() » Compiling ${e}...`);try{var i=t.compile(e,n);return s.verbose&&!/cli(?:\.min)?\.js$/.test(require.main.filename)&&console.info("compile() » Compilation complete. Check returned object."),{code:i.css,srcMap:i.sourceMap,srcPath:l.resolve(process.cwd(),e)}}catch(e){return console.error(`
compile() » ERROR: ${e.message}
`),{error:e}}}}}else console.error("compile() » ERROR: 1st arg <inputPath> must be an existing directory or file."),console.error(`compile() » ${e} does not exist.`),console.info("compile() » For more help, please visit "+o)}function u(e,o,s,r){const i=JSON.stringify(o,null,2).replace(/"([^"]+)":/g,"$1:").replace(/"/g,"'").replace(/\n\s*/g," "),n=Object.keys(o).join(", "),t=Object.keys(o).filter(e=>"boolean"==typeof o[e]),c=Object.keys(o).filter(e=>Number.isInteger(o[e])),l=(u.caller?.name||"validateOptions")+"() » ";var a=()=>{console.info(l+`Valid options: [ ${n} ]`),console.info(l+"If omitted, default settings are: "+i)},p=()=>{console.info(l+"For more help, please visit "+s)};if("object"!=typeof e)return console.error(l+"ERROR: [options] can only be an object of key/values."),console.info(l+"Example valid call: "+r),a(),p(),!1;for(const f in e){if("isRecursing"!=f&&!Object.prototype.hasOwnProperty.call(o,f))return console.error(l+`ERROR: \`${f}\` is an invalid option.`),a(),p(),!1;if(t.includes(f)&&"boolean"!=typeof e[f])return console.error(l+`ERROR: [${f}] option can only be \`true\` or \`false\`.`),p(),!1;if(c.includes(f)&&(e[f]=parseInt(e[f],10),isNaN(e[f])||e[f]<1))return console.error(l+`ERROR: [${f}] option can only be an integer > 0.`),p(),!1}return!0}module.exports={compile:e,find:a,findSCSS:a};