#!/usr/bin/env node
/**
 *  Â© 2024 Adam Lui & contributors under the MIT license.
 *  Source: https://code.scsstocss.org/node.js
 *  Documentation: https://docs.scsstocss.org/node.js
 */
const pkgName="@adamlui/scss-to-css",copyright="Â© 2024 Adam Lui & contributors under the MIT license.",cmdFormat="scss-to-css [inputPath] [outputPath] [options]",srcURL="https://code.scsstocss.org/node.js",docURL="https://docs.scsstocss.org/node.js/#-command-line-usage",scssToCSS=require(__dirname.match(/src/)?"./scss-to-css":"./scss-to-css.min"),fs=require("fs"),path=require("path"),execSync=require("child_process")["execSync"],nc="[0m",br="[1;91m",by="[1;33m",bg="[1;92m",bw="[1;97m",config={},reArgs={flags:{dryRun:/^--?(?:n|dry-?run)$/,includeDotFolders:/^--?(?:dd?|(?:include-?)?dot-?(?:folder|dir(?:ector(?:y|ie))?)s?=?(?:true|1)?)$/,noSourceMaps:/^--?(?:S|(?:exclude|disable|no)-?so?u?rce?-?maps?|so?u?rce?-?maps?=(?:false|0))$/,noRecursion:/^--?(?:R|(?:disable|no)-?recursi(?:on|ve)|recursi(?:on|ve)=(?:false|0))$/,noMinify:/^--?(?:M|(?:disable|no)-?minif(?:y|ication)|minif(?:y|ication)=(?:false|0))$/,quietMode:/^--?q(?:uiet)?(?:-?mode)?$/},paramOptions:{ignoreFiles:/^--?(?:ignore|skip|exclude)(?:d?-?files?)?(?:=.*|$)/,comment:/^--?comments?(?:=.*|$)/},infoCmds:{help:/^--?h(?:elp)?$/,version:/^--?ve?r?s?i?o?n?$/}};if(process.argv.forEach(s=>{var e,o,n;s.startsWith("-")&&(n=Object.keys(reArgs.flags).find(e=>reArgs.flags[e].test(s)),e=Object.keys(reArgs.paramOptions).find(e=>reArgs.paramOptions[e].test(s)),o=Object.keys(reArgs.infoCmds).find(e=>reArgs.infoCmds[e].test(s)),n?config[n]=!0:e?(/=.+/.test(s)||(console.error(`
${br}ERROR: Arg [--${s.replace(/-/g,"")}] requires '=' followed by a value.`+nc),printHelpCmdAndDocURL(),process.exit(1)),n=s.split("=")[1],config[e]=parseInt(n)||n):o||(console.error(`
${br}ERROR: Arg [${s}] not recognized.`+nc),console.info(`
${by}Valid arguments are below.`+nc),printHelpSections(["flags","paramOptions","infoCmds"]),process.exit(1)))}),process.argv.some(e=>reArgs.infoCmds.help.test(e)))printHelpSections();else if(process.argv.some(e=>reArgs.infoCmds.version.test(e))){const k=execSync(`npm view ${pkgName} version`).toString().trim()||"none";let e,s=process.cwd();for(;"/"!=s;){const n=path.join(s,"package.json");if(fs.existsSync(n)){const o=require(n);e=(o.dependencies?.[pkgName]||o.devDependencies?.[pkgName])?.match(/(\d+\.\d+\.\d+)/)[0]||"none";break}s=path.dirname(s)}console.info(`
Global version: `+k),console.info("Local version: "+e)}else{const[p="",q=""]=process.argv.slice(2).filter(e=>!e.startsWith("-")).map(e=>e.replace(/^\/*/,"")),r=path.resolve(process.cwd(),p),s=(p&&!fs.existsSync(r)&&(console.error(`
${br}Error: First argument can only be an existing file or directory.`+`
'${r}' does not exist.`+nc+`

${bg}Example valid command: 
Â» scss-to-css . output.min.css`+nc),printHelpCmdAndDocURL(),process.exit(1)),p.endsWith(".scss")?[r]:scssToCSS.findSCSS(r,{recursive:!config.noRecursion,verbose:!config.quietMode,ignoreFiles:(config.ignoreFiles?.split(",")??[]).map(e=>e.trim())}));if(config.dryRun)0<s.length?(console.info(`
${by}SCSS files to be compiled:`+nc),s.forEach(e=>console.info(e))):console.info(by+`
No SCSS files will be compiled.`+nc);else{const x=[],y=s.map(e=>{var s=scssToCSS.compile(e,{verbose:!config.quietMode,minify:!config.noMinify,sourceMaps:!config.noSourceMaps,comment:config.comment?.replace(/\\n/g,"\n")});return s.error&&x.push(e),s}).filter(e=>!e.error);if(y?.forEach(({code:e,srcMap:s,srcPath:o})=>{var n=path.join(path.dirname(o),/(?:src|s[ac]ss)$/.test(path.dirname(o))?"../"+(q||"css"):q.endsWith(".css")?path.dirname(q):q||"css"),o=(q.endsWith(".css")&&p.endsWith(".scss")?path.basename(q).replace(/(\.min)?\.css$/,""):path.basename(o,".scss"))+".min.css",o=path.join(n,o);fs.existsSync(n)||fs.mkdirSync(n,{recursive:!0}),fs.writeFileSync(o,e,"utf8"),config.noSourceMaps||fs.writeFileSync(o+".map",JSON.stringify(s),"utf8")}),0<y?.length){const I=1<y.length?"s":"";printIfNotQuiet(`
${bg}Compilation complete!`+nc),printIfNotQuiet(bw+y.length+" CSS file"+I+(config.noSourceMaps?"":` + ${y.length} source map`+I)+" generated."+nc)}else printIfNotQuiet(by+"No SCSS files processed."+nc);0<x.length&&(printIfNotQuiet(`
`+br+x.length+" file"+(1<x.length?"s":"")+" failed to compile:"+nc),x.forEach(e=>printIfNotQuiet(e)))}}function printHelpSections(e=["header","usage","pathArgs","flags","paramOptions","infoCmds"]){var s=`[106m[30m ${pkgName.replace(/^@[^/]+\//,"")} ${nc} `;const o={header:[`
â”œ `+s+copyright,s+"Source: "+srcURL],usage:[`
${bw}o Usage:`+nc,` ${bw}Â» `+(bg+cmdFormat+nc)],pathArgs:[`
${bw}o Path arguments:`+nc," [inputPath]                             Path to SCSS file or directory containing SCSS files to be compiled, relative to the current working directory."," [outputPath]                            Path to file or directory where CSS + sourcemap files will be stored, relative to original file location (if not provided, css/ is used)."],flags:[`
${bw}o Boolean options:`+nc," -n, --dry-run                           Don't actually compile the file(s), just show if they will be processed."," -d, --include-dotfolders                Include dotfolders in file search."," -S, --no-source-maps                    Prevent source maps from being generated."," -M, --no-minify                         Disable minification of output CSS."," -R, --no-recursion                      Disable recursive file searching."," -q, --quiet                             Suppress all logging except errors."],paramOptions:[`
${bw}o Parameter options:`+nc,'--ignore-files="file1.scss,file2.scss"   Files to exclude from compilation.',"--comment=\"comment\"                      Prepend comment to compiled CSS. Separate by line using '\\n'."],infoCmds:[`
${bw}o Info commands:`+nc," -h, --help                              Display help screen."," -v, --version                           Show version number."]};e.forEach(t=>{o[t]?.forEach(e=>{{var n=/header|usage/.test(t)?1:41;const i=process.stdout.columns||80,r=[],s=e.match(/\S+|\s+/g);let o="";s.forEach(e=>{var s=i-(0==r.length?0:n);o.length+"| ".length+e.length>s&&(r.push(0==r.length?o:o.trimStart()),o=""),o+=e}),r.push(0==r.length?o:o.trimStart()),r.forEach((e,s)=>console.info("| "+(0==s?e:" ".repeat(n)+e)))}})}),console.info("\nFor more help, please visit: "+bw+docURL+nc)}function printHelpCmdAndDocURL(){console.info(`
For more help, type 'scss-to-css --help' or visit
`+(bw+docURL+nc))}function printIfNotQuiet(e){config.quietMode||console.info(e)}