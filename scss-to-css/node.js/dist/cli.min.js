#!/usr/bin/env node
/**
 *  Â© 2024 Adam Lui & contributors under the MIT license.
 *  Source: https://code.scsstocss.org/node.js
 *  Documentation: https://docs.scsstocss.org/node.js
 */
let pkgName="@adamlui/scss-to-css",copyright="Â© 2024 Adam Lui & contributors under the MIT license.",cmdFormat="scss-to-css [inputPath] [outputPath] [options]",srcURL="https://code.scsstocss.org/node.js",docURL="https://docs.scsstocss.org/node.js/#-command-line-usage",scssToCSS=require(__dirname.match(/src/)?"./scss-to-css":"./scss-to-css.min"),fs=require("fs"),path=require("path"),ncp=require("node-clipboardy"),execSync=require("child_process").execSync,nc="[0m",br="[1;91m",by="[1;33m",bg="[1;92m",bw="[1;97m",config={},reArgs={flags:{dryRun:/^--?(?:n|dry-?run)$/,includeDotFolders:/^--?(?:dd?|(?:include-?)?dot-?(?:folder|dir(?:ector(?:y|ie))?)s?=?(?:true|1)?)$/,noSourceMaps:/^--?(?:S|(?:exclude|disable|no)-?so?u?rce?-?maps?|so?u?rce?-?maps?=(?:false|0))$/,noRecursion:/^--?(?:R|(?:disable|no)-?recursi(?:on|ve)|recursi(?:on|ve)=(?:false|0))$/,noMinify:/^--?(?:M|(?:disable|no)-?minif(?:y|ication)|minif(?:y|ication)=(?:false|0))$/,copy:/^--?c(?:opy)?$/,quietMode:/^--?q(?:uiet)?(?:-?mode)?$/},paramOptions:{ignoreFiles:/^--?(?:ignore|skip|exclude)(?:d?-?files?)?(?:=.*|$)/,comment:/^--?comments?(?:=.*|$)/},infoCmds:{help:/^--?h(?:elp)?$/,version:/^--?ve?r?s?i?o?n?$/}};if(process.argv.forEach(s=>{var e,o,i;s.startsWith("-")&&(i=Object.keys(reArgs.flags).find(e=>reArgs.flags[e].test(s)),e=Object.keys(reArgs.paramOptions).find(e=>reArgs.paramOptions[e].test(s)),o=Object.keys(reArgs.infoCmds).find(e=>reArgs.infoCmds[e].test(s)),i?config[i]=!0:e?(/=.+/.test(s)||(console.error(`
${br}ERROR: Arg [--${s.replace(/-/g,"")}] requires '=' followed by a value.`+nc),printHelpCmdAndDocURL(),process.exit(1)),i=s.split("=")[1],config[e]=parseInt(i)||i):o||(console.error(`
${br}ERROR: Arg [${s}] not recognized.`+nc),console.info(`
${by}Valid arguments are below.`+nc),printHelpSections(["flags","paramOptions","infoCmds"]),process.exit(1)))}),process.argv.some(e=>reArgs.infoCmds.help.test(e)))printHelpSections();else if(process.argv.some(e=>reArgs.infoCmds.version.test(e))){let e=execSync(`npm view ${pkgName} version`).toString().trim()||"none",o,i=process.cwd();for(;"/"!=i;){let s=path.join(i,"package.json");if(fs.existsSync(s)){let e=require(s);o=(e.dependencies?.[pkgName]||e.devDependencies?.[pkgName])?.match(/(\d+\.\d+\.\d+)/)[0]||"none";break}i=path.dirname(i)}console.info(`
Global version: `+e),console.info("Local version: "+o)}else{let[n="",r=""]=process.argv.slice(2).filter(e=>!e.startsWith("-")).map(e=>e.replace(/^\/*/,"")),s=path.resolve(process.cwd(),n);if(n&&!fs.existsSync(s)){let e=s+".scss";fs.existsSync(e)?s=e:(console.error(`
${br}Error: First argument can only be an existing file or directory.`+`
'${s}' does not exist.`+nc),console.info(`
${bg}Example valid command: 
Â» scss-to-css . output.min.css`+nc),printHelpCmdAndDocURL(),process.exit(1))}let e=s.endsWith(".scss")&&!fs.statSync(s).isDirectory()?[s]:scssToCSS.findSCSS(s,{recursive:!config.noRecursion,verbose:!config.quietMode,ignoreFiles:(config.ignoreFiles?.split(",")??[]).map(e=>e.trim())});if(config.dryRun)0<e.length?(console.info(`
${by}SCSS files to be compiled:`+nc),e.forEach(e=>console.info(e))):console.info(by+`
No SCSS files will be compiled.`+nc);else{let o=[],s=e.map(e=>{var s=scssToCSS.compile(e,{verbose:!config.quietMode,minify:!config.noMinify,sourceMaps:!config.noSourceMaps,comment:config.comment?.replace(/\\n/g,"\n")});return s.error&&o.push(e),s}).filter(e=>!e.error);if(0<s?.length){let e=1<s.length?"s":"";printIfNotQuiet(`
${bg}Compilation complete!`+nc),printIfNotQuiet(bw+s.length+" CSS file"+e+(config.noSourceMaps?"":` + ${s.length} source map`+e)+" generated."+nc)}else printIfNotQuiet(`
${by}No SCSS files processed.`+nc);0<o.length&&(printIfNotQuiet(`
`+br+o.length+" file"+(1<o.length?"s":"")+" failed to compile:"+nc),o.forEach(e=>printIfNotQuiet(e))),0==s?.length&&process.exit(0),config.copy&&1==s?.length?(console.log(`
`+(bw+s[0].code+nc)),printIfNotQuiet("\nCopying to clipboard..."),ncp.writeSync(s[0].code)):(printIfNotQuiet(`
Writing to file${1<s?.length?"s":""}...`),s?.forEach(({code:e,srcMap:s,srcPath:o})=>{var i=path.join(path.dirname(o),/(?:src|s[ac]ss)$/.test(path.dirname(o))?"../"+(r||"css"):r.endsWith(".css")?path.dirname(r):r||"css"),o=(r.endsWith(".css")&&n.endsWith(".scss")?path.basename(r).replace(/(\.min)?\.css$/,""):path.basename(o,".scss"))+".min.css",o=path.join(i,o);fs.existsSync(i)||fs.mkdirSync(i,{recursive:!0}),fs.writeFileSync(o,e,"utf8"),config.noSourceMaps||fs.writeFileSync(o+".map",JSON.stringify(s),"utf8")}))}}function printHelpSections(e=["header","usage","pathArgs","flags","paramOptions","infoCmds"]){var s=`[106m[30m ${pkgName.replace(/^@[^/]+\//,"")} ${nc} `;let o={header:[`
â”œ `+s+copyright,s+"Source: "+srcURL],usage:[`
${bw}o Usage:`+nc,` ${bw}Â» `+(bg+cmdFormat+nc)],pathArgs:[`
${bw}o Path arguments:`+nc," [inputPath]                             Path to SCSS file or directory containing SCSS files to be compiled, relative to the current working directory."," [outputPath]                            Path to file or directory where CSS + sourcemap files will be stored, relative to original file location (if not provided, css/ is used)."],flags:[`
${bw}o Boolean options:`+nc," -n, --dry-run                           Don't actually compile the file(s), just show if they will be processed."," -d, --include-dotfolders                Include dotfolders in file search."," -S, --no-source-maps                    Prevent source maps from being generated."," -M, --no-minify                         Disable minification of output CSS."," -R, --no-recursion                      Disable recursive file searching."," -c, --copy                              Copy compiled CSS to clipboard instead of writing to file if single source file is processed."," -q, --quiet                             Suppress all logging except errors."],paramOptions:[`
${bw}o Parameter options:`+nc,'--ignore-files="file1.scss,file2.scss"   Files to exclude from compilation.',"--comment=\"comment\"                      Prepend header comment to compiled CSS. Separate by line using '\\n'."],infoCmds:[`
${bw}o Info commands:`+nc," -h, --help                              Display help screen."," -v, --version                           Show version number."]};e.forEach(t=>o[t]?.forEach(s=>{{var r=/header|usage/.test(t)?1:41;let o=process.stdout.columns||80,i=[],e=s.match(/\S+|\s+/g),n="";e.forEach(e=>{var s=o-(i.length?r:0);n.length+"| ".length+e.length>s&&(i.push(i.length?n.trimStart():n),n=""),n+=e}),i.push(i.length?n.trimStart():n),i.forEach((e,s)=>console.info("| "+(0==s?e:" ".repeat(r)+e)))}})),console.info("\nFor more help, please visit: "+bw+docURL+nc)}function printHelpCmdAndDocURL(){console.info(`
For more help, type 'scss-to-css --help' or visit
`+(bw+docURL+nc))}function printIfNotQuiet(e){config.quietMode||console.info(e)}