async function e(t){let r;try{r=require("generate-ip").ipv4.validate}catch(e){await import("https://cdn.jsdelivr.net/npm/generate-ip/dist/generate-ip.min.js"),r=ipv4.validate}if(r&&!r(t,{verbose:!1}))return console.error("geolocate() » ERROR: Invalid IP address passed.");try{let e;if("undefined"!=typeof fetch)e=await fetch("http://ip-api.com/json/"+t);else{if("function"!=typeof require)return console.error("geolocate() » ERROR: Environment not supported.");e=await require("axios").get("http://ip-api.com/json/"+t)}const{status:o,org:i,as:n,query:c,...a}=await e.json();return{ip:t,...a}}catch(e){console.error("geolocate() »",e)}}async function t(){return fetch("https://ifconfig.me/ip").then(e=>e.text()).catch(()=>fetch("http://ip-api.com/json/").then(e=>e.json()).then(e=>e.query)).catch(async()=>{try{var e=require("child_process")["exec"],t=require("util")["promisify"],{stdout:r,stderr:o}=await t(e)("curl -s ifconfig.me");return o?console.error("getOwnIP() »",o):r.trim()}catch(e){console.error("getOwnIP() »",e)}})}const r={geolocate:e,locate:e,getOwnIP:t};try{module.exports={...r}}catch(e){}try{window.geo={...r}}catch(e){}