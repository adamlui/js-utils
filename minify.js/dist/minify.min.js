#!/usr/bin/env node
const a=require("fs"),d=require("path"),f=require("uglify-js");function y(o,i={}){var e={recursive:!0,verbose:!0,dotFolders:!1,dotFiles:!1};if("string"!=typeof o)return console.error("findJS() » ERROR: 1st arg <searchDir> must be a string.");var r=d.resolve(process.cwd(),o);if(a.existsSync(r)){const s=JSON.stringify(e,null,2).replace(/"([^"]+)":/g,"$1:").replace(/"/g,"'").replace(/\n\s*/g," "),t=Object.keys(e).join(", ");var n=()=>{console.info(`findJS() » Valid options: [ ${t} ]`),console.info("findJS() » If omitted, default settings are: "+s)};if("object"==typeof i){for(const f in i){if(!Object.prototype.hasOwnProperty.call(e,f)&&"isRecursing"!==f)return console.error(`findJS() » ERROR: \`${f}\` is an invalid option.`),void n();if("boolean"!=typeof i[f])return console.error(`findJS() » ERROR: [${f}] option can only be \`true\` or \`false\`.`)}i={...e,...i};const l=a.readdirSync(o),c=[];return i.verbose&&!i.isRecursing&&console.info("findJS() » Searching for unminified JS files..."),l.forEach(e=>{var r=d.resolve(o,e);a.statSync(r).isDirectory()&&"node_modules"!=e&&(i.dotFolders||!e.startsWith("."))&&i.recursive?c.push(...y(r,{...i,isRecursing:!0})):!/\.js(?<!\.min\.js)$/.test(e)||!i.dotFiles&&e.startsWith(".")||c.push(r)}),!i.isRecursing&&i.verbose&&(console.info("findJS() » Search complete! "+(0===c.length?"No":c.length)+` file${1<c.length?"s":""} found.`),"minify"===y.caller.name||require.main.filename.endsWith("cli.js")||console.info("findJS() » Check returned array.")),i.isRecursing||0<c.length?c:[]}console.error("findJS() » ERROR: 2nd arg [options] can only be an object of key/values."),console.info("findJS() » Example valid call: findJS('assets/js', { verbose: false, dotFolders: true })"),n()}else console.error("findJS() » ERROR: 1st arg <searchDir> must be an existing directory."),console.error(`findJS() » ${r} does not exist.`)}function e(e,o={}){var r={recursive:!0,verbose:!0,dotFolders:!1,dotFiles:!1,mangle:!0};if("string"!=typeof e)return console.error("minify() » ERROR: 1st arg <input> must be a string.");const i=JSON.stringify(r,null,2).replace(/"([^"]+)":/g,"$1:").replace(/"/g,"'").replace(/\n\s*/g," "),n=Object.keys(r).join(", ");var s,t=()=>{console.info(`minify() » Valid options: [ ${n} ]`),console.info("minify() » If omitted, default settings are: "+i)};if("object"==typeof o){for(const c in o){if(!Object.prototype.hasOwnProperty.call(r,c))return console.error(`minify() » ERROR: \`${c}\` is an invalid option.`),void t();if("boolean"!=typeof o[c])return console.error(`minify() » ERROR: [${c}] option can only be \`true\` or \`false\`.`)}const l={mangle:!!(o={...r,...o}).mangle&&{toplevel:!0}};return a.existsSync(e)?e.endsWith(".js")?(o.verbose&&console.info(`minify() » Minifying ${e}...`),(s=f.minify(a.readFileSync(e,"utf8"),l)).error&&console.error("minify() » ERROR: "+s.error.message),{code:s.code,srcPath:d.resolve(process.cwd(),e),error:s.error}):y(e,{recursive:o.recursive,verbose:o.verbose,dotFolders:o.dotFolders,dotFiles:o.dotFiles})?.map(e=>{o.verbose&&console.info(`minify() » Minifying ${e}...`);var r=a.readFileSync(e,"utf8"),r=f.minify(r,l);return r.error&&console.error("minify() » ERROR: "+r.error.message),{code:r.code,srcPath:e,error:r.error}}).filter(e=>!e.error):(o.verbose&&console.info("minify() » Minifying passed source code..."),(s=f.minify(e,l)).error&&console.error("minify() » ERROR: "+s.error.message),{code:s.code,srcPath:void 0,error:s.error})}console.error("minify() » ERROR: 2nd arg [options] can only be an object of key/values."),console.info("minify() » Example valid call: minify('assets/js', { recursive: false, mangle: false })"),t()}module.exports={minify:e,findJS:y};