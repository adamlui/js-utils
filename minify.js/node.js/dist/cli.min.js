#!/usr/bin/env node
/**
 *  Â© 2023â€“2024 Adam Lui & contributors under the MIT license.
 *  Source: https://code.minify-js.org/node.js
 *  Documentation: https://docs.minify-js.org/node.js
 */
const pkgName="@adamlui/minify.js",copyright="Â© 2024 Adam Lui & contributors under the MIT license.",cmdFormat="minify-js [inputPath] [outputPath] [options]",srcURL="https://code.minify-js.org/node.js",docURL="https://docs.minify-js.org/node.js/#-command-line-usage",minifyJS=require(__dirname.match(/src/)?"./minify":"./minify.min"),fs=require("fs"),path=require("path"),execSync=require("child_process")["execSync"],nc="[0m",br="[1;91m",by="[1;33m",bg="[1;92m",bw="[1;97m",config={},reArgs={flags:{dryRun:/^--?(?:n|dry-?run)$/,includeDotFolders:/^--?(?:dd?|(?:include-?)?dot-?(?:folder|dir(?:ector(?:y|ie))?)s?=?(?:true|1)?)$/,includeDotFiles:/^--?(?:df|D|(?:include-?)?dot-?files?=?(?:true|1)?)$/,noRecursion:/^--?(?:R|(?:disable|no)-?recursi(?:on|ve)|recursi(?:on|ve)=(?:false|0))$/,noMangle:/^--?(?:M|(?:disable|no)-?mangle|mangle=(?:false|0))$/,quietMode:/^--?q(?:uiet)?(?:-?mode)?$/},paramOptions:{comment:/^--?comments?(?:=.*|$)/},infoCmds:{help:/^--?h(?:elp)?$/,version:/^--?ve?r?s?i?o?n?$/}};if(process.argv.forEach(n=>{var e,i,o;n.startsWith("-")&&(e=Object.keys(reArgs.paramOptions).find(e=>reArgs.paramOptions[e].test(n)),o=Object.keys(reArgs.flags).find(e=>reArgs.flags[e].test(n)),i=Object.keys(reArgs.infoCmds).find(e=>reArgs.infoCmds[e].test(n)),o?config[o]=!0:e?(n.includes("=")||(console.error(`
${br}ERROR: Arg [--${n.replace(/-/g,"")}] requires '=' followed by a value.`+nc),printHelpCmdAndDocURL(),process.exit(1)),o=n.split("=")[1],config[e]=parseInt(o)||o):i||(console.error(`
${br}ERROR: Arg [${n}] not recognized.`+nc),console.info(`
${by}Valid arguments are below.`+nc),printHelpSections(["flags","paramOptions","infoCmds"]),process.exit(1)))}),process.argv.some(e=>reArgs.infoCmds.help.test(e)))printHelpSections();else if(process.argv.some(e=>reArgs.infoCmds.version.test(e))){const k=execSync(`npm view ${pkgName} version`).toString().trim()||"none";let e,i=process.cwd();for(;"/"!=i;){const n=path.join(i,"package.json");if(fs.existsSync(n)){const o=require(n);e=(o.dependencies?.[pkgName]||o.devDependencies?.[pkgName])?.match(/(\d+\.\d+\.\d+)/)[0]||"none";break}i=path.dirname(i)}console.info(`
Global version: `+k),console.info("Local version: "+e)}else{const[p="",q=""]=process.argv.slice(2).filter(e=>!e.startsWith("-")).map(e=>e.replace(/^\/*/,"")),r=path.resolve(process.cwd(),p),s=(p&&!fs.existsSync(r)&&(console.error(`
${br}Error: First argument can only be an existing file or directory.`+`
${r} does not exist.`+nc+`

${bg}Example valid command: 
Â» minify-js . output.min.js`+nc),printHelpCmdAndDocURL(),process.exit(1)),p.endsWith(".js")?[r]:minifyJS.findJS(r,{recursive:!config.noRecursion,verbose:!config.quietMode}));if(config.dryRun)0<s.length?(console.info(`
${by}JS files to be minified:`+nc),s.forEach(e=>console.info(e))):console.info(by+`
No JS files will be minified.`+nc);else{const w=[],x=s.map(e=>{var n=minifyJS.minify(e,{verbose:!config.quietMode,mangle:!config.noMangle,comment:config.comment?.replace(/\\n/g,"\n")});return n.error&&w.push(e),n}).filter(e=>!e.error);x?.forEach(({code:e,srcPath:n})=>{var i=path.join(path.dirname(n),(/so?u?rce?$/.test(path.dirname(n))?"../":"")+(q.endsWith(".js")?path.dirname(q):q||"min")),n=(q.endsWith(".js")&&p.endsWith(".js")?path.basename(q).replace(/(\.min)?\.js$/,""):path.basename(n,".js"))+".min.js",n=path.join(i,n);fs.existsSync(i)||fs.mkdirSync(i,{recursive:!0}),fs.writeFileSync(n,e,"utf8")}),0<x?.length?(printIfNotQuiet(`
${bg}Minification complete!`+nc),printIfNotQuiet(`${x.length} file${1<x.length?"s":""} minified.`)):printIfNotQuiet(by+"No unminified JavaScript files processed."+nc),0<w.length&&(printIfNotQuiet(`
`+br+w.length+" file"+(1<w.length?"s":"")+" failed to minify:"+nc),w.forEach(e=>printIfNotQuiet(e)))}}function printHelpSections(e=["header","usage","pathArgs","flags","paramOptions","infoCmds"]){var n=`[106m[30m ${pkgName.replace(/^@[^/]+\//,"")} ${nc} `;const i={header:[`
â”œ `+n+copyright,n+"Source: "+srcURL],usage:[`
${bw}o Usage:`+nc,` ${bw}Â» `+(bg+cmdFormat+nc)],pathArgs:[`
${bw}o Path arguments:`+nc," [inputPath]                 Path to JS file or directory containing JS files to be minified, relative to the current working directory."," [outputPath]                Path to file or directory where minified files will be stored, relative to original file location (if not provided, min/ is used)."],flags:[`
${bw}o Boolean options:`+nc," -n, --dry-run               Don't actually minify the file(s), just show if they will be processed."," -d, --include-dotfolders    Include dotfolders in file search."," -D, --include-dotfiles      Include dotfiles in file search."," -R, --no-recursion          Disable recursive file searching."," -M, --no-mangle             Disable mangling names."," -q, --quiet                 Suppress all logging except errors."],paramOptions:[`
${bw}o Parameter options:`+nc,'--comment="comment"          Prepend comment to minified code.'],infoCmds:[`
${bw}o Info commands:`+nc," -h, --help                  Display help screen."," -v, --version               Show version number."]};e.forEach(t=>{i[t]?.forEach(e=>{{var o=/header|usage/.test(t)?1:29;const r=process.stdout.columns||80,s=[],n=e.match(/\S+|\s+/g);let i="";n.forEach(e=>{var n=r-(0==s.length?0:o);i.length+"| ".length+e.length>n&&(s.push(0==s.length?i:i.trimStart()),i=""),i+=e}),s.push(0==s.length?i:i.trimStart()),s.forEach((e,n)=>console.info("| "+(0==n?e:" ".repeat(o)+e)))}})}),console.info("\nFor more help, please visit: "+bw+docURL+nc)}function printHelpCmdAndDocURL(){console.info(`
For more help, type 'minify.js --help' or visit
`+(bw+docURL+nc))}function printIfNotQuiet(e){config.quietMode||console.info(e)}