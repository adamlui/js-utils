#!/usr/bin/env node
const n=require(__dirname.match(/src/)?"./minify":"./minify.min"),o=require("fs"),s=require("path"),r="[0m",t="[1;91m",l="[1;33m",e="[1;92m",c={},a={dryRun:/^--?(?:n|dry-?run)$/,includeDotFolders:/^--?(?:dd?|(?:include-?)?dot-?(?:folder|dir(?:ector(?:y|ie))?)s?=?(?:true|1)?)$/,includeDotFiles:/^--?(?:df|D|(?:include-?)?dot-?files?=?(?:true|1)?)$/,noRecursion:/^--?(?:R|(?:disable|no)-?recursi(?:on|ve)|recursi(?:on|ve)=(?:false|0))$/,noMangle:/^--?(?:M|(?:disable|no)-?mangle|mangle=(?:false|0))$/,quietMode:/^--?q(?:uiet)?(?:-?mode)?$/,help:/^--?h(?:elp)?$/,version:/^--?ve?r?s?i?o?n?$/};if(process.argv.forEach(i=>{var e;i.startsWith("-")&&((e=Object.keys(a).find(e=>a[e].test(i)))?c[e]=!0:(console.error(`
${t}ERROR: Arg [${i}] not recognized.`+r),console.info(`
${l}Valid arguments are below.`+r),d(["configOptions","infoCmds"]),process.exit(1)))}),process.argv.some(e=>a.help.test(e)))d();else if(process.argv.some(e=>a.version.test(e)))console.info("v"+require("./package.json").version);else{const[f="",m=""]=process.argv.slice(2).filter(e=>!e.startsWith("-")).map(e=>e.replace(/^\/*/,"")),u=s.resolve(process.cwd(),f),h=(f&&!o.existsSync(u)&&(console.error(`
${t}Error: First argument can only be an existing file or directory.`+`
${u} does not exist.`+r+`

${e}Example valid command: 
Â» minify-js . output.min.js`+r+`

${l}For all command options: 
Â» minify-js --help`+r),process.exit(1)),f.endsWith(".js")?[u]:n.findJS(u,{recursive:!c.noRecursion,verbose:!c.quietMode}));if(c.dryRun)0<h.length?(console.info(`
${l}JS files to be minified:`+r),h.forEach(e=>console.info(e))):console.info(l+`
No JS files will be minified.`+r);else{const p=[],g=h.map(e=>{var i=n.minify(e,{verbose:!c.quietMode,mangle:!c.noMangle});return i.error&&p.push(e),i}).filter(e=>!e.error);g?.forEach(({code:e,srcPath:i})=>{var n=s.join(s.dirname(i),(/so?u?rce?$/.test(s.dirname(i))?"../":"")+(m.endsWith(".js")?s.dirname(m):m||"min")),i=(m.endsWith(".js")&&f.endsWith(".js")?s.basename(m).replace(/(\.min)?\.js$/,""):s.basename(i,".js"))+".min.js",i=s.join(n,i);o.existsSync(n)||o.mkdirSync(n,{recursive:!0}),o.writeFileSync(i,e,"utf8")}),0<g?.length?(i(`
${e}Minification complete!`+r),i(`${g.length} file${1<g.length?"s":""} minified.`)):i(l+"No unminified JavaScript files processed."+r),0<p.length&&(i(`
`+t+p.length+" file"+(1<p.length?"s":"")+" failed to minify:"+r),p.forEach(e=>i(e)))}}function d(e=["cmdFormat","pathArgs","configOptions","infoCmds"]){const i={cmdFormat:[`
${l}minify-js [inputPath] [outputPath] [options]`+r],pathArgs:["\nPath arguments:"," [inputPath]                 Path to JS file or directory containing JS files to be minified, relative to the current working directory."," [outputPath]                Path to file or directory where minified files will be stored, relative to original file location (if not provided, min/ is used)."],configOptions:["\nConfig options:"," -n, --dry-run               Don't actually minify the file(s), just show if they will be processed."," -d, --include-dotfolders    Include dotfolders in file search."," -D, --include-dotfiles      Include dotfiles in file search."," -R, --no-recursion          Disable recursive file searching."," -M, --no-mangle             Disable mangling names."," -q, --quiet                 Suppress all logging except errors."],infoCmds:["\nInfo commands:"," -h, --help                  Display help screen."," -v, --version               Show version number."]};e.forEach(e=>{i[e]?.forEach(e=>{{const o=process.stdout.columns||80,s=[],i=e.match(/\S+|\s+/g);let n="";i.forEach(e=>{var i=o-(0===s.length?0:29);n.length+e.length>i&&(s.push(0===s.length?n:n.trimStart()),n=""),n+=e}),s.push(0===s.length?n:n.trimStart()),s.forEach((e,i)=>console.info(0===i?e:" ".repeat(29)+e))}})})}function i(e){c.quietMode||console.info(e)}