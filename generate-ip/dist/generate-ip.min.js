#!/usr/bin/env node
const t=require("crypto")["randomInt"],n=require("child_process")["execSync"],s={generate:function(e={}){var o={verbose:!0};e={...o,...e};for(const n of Object.keys(e)){if(!Object.prototype.hasOwnProperty.call(o,n))return console.error(`ipv4.generate() Â» ERROR: \`${n}\` is an invalid option.
`+`ipv4.generate() Â» Valid options: [ ${Object.keys(o).join(", ")} ]`);if("boolean"!=typeof e[n])return console.error(`ipv4.generate() Â» ERROR: \`${n}\` option can only be set to \`true\` or \`false\`.`)}e.verbose&&console.info("ipv4.generate() Â» Generating IPv4 address...");var r=[];for(let e=0;e<4;e++)r.push(t(0,256));return r.join(".")},validate:function(e,o={}){var r={verbose:!0};if(o={...r,...o},"string"!=typeof e)return console.error("ipv4.validate() Â» ERROR: 1st arg <address> must be a string.");for(const n of Object.keys(o)){if(!Object.prototype.hasOwnProperty.call(r,n))return console.error(`ipv4.validate() Â» ERROR: \`${n}\` is an invalid option.
`+`ipv4.validate() Â» Valid options: [ ${Object.keys(r).join(", ")} ]`);if("boolean"!=typeof o[n])return console.error(`ipv4.validate() Â» ERROR: \`${n}\` option can only be set to \`true\` or \`false\`.`)}o.verbose&&console.info(`ipv4.validate() Â» Validating ${e}...`);e=e.split("."),e=!(4!==e.length||e.some(e=>!/^\d+$/.test(e)||parseInt(e,10)<0||255<parseInt(e,10)));return o.verbose&&console.info(`ipv4.validate() Â» IP is ${e?"":"in"}valid IPv4 address!`),e}},e={generate:function(e={}){var o={verbose:!0,leadingZeros:!1,doubleColon:!0};for(const n in e={...o,...e}){if(!Object.prototype.hasOwnProperty.call(o,n))return console.error(`ipv6.generate() Â» ERROR: \`${n}\` is an invalid option.
`+`ipv6.generate() Â» Valid options: [ ${Object.keys(o).join(", ")} ]`);if("boolean"!=typeof e[n])return console.error(`ipv6.generate() Â» ERROR: [${n}] option can only be \`true\` or \`false\`.`)}e.verbose&&console.info("ipv6.generate() Â» Generating IPv6 address...");var r=[];for(let e=0;e<8;e++){let o="";for(let e=0;e<4;e++)o+=t(0,16).toString(16);r.push(o)}return this.format(r.join(":"),{...e,verbose:!1})},format:function(e,o={}){var r,n,t={verbose:!0,leadingZeros:!1,doubleColon:!0};if(o={...t,...o},"string"!=typeof e)return console.error("ipv6.format() Â» ERROR: 1st arg <address> must be a string.");if(!this.validate(e,{verbose:!1}))return console.error(`ipv6.format() Â» ERROR: 
- ${e} is not a valid IPv6 address.`);for(const a in o){if(!Object.prototype.hasOwnProperty.call(t,a))return console.error(`ipv6.format() Â» ERROR: \`${a}\` is an invalid option.
`+`ipv6.format() Â» Valid options: [ ${Object.keys(t).join(", ")} ]`);if("boolean"!=typeof o[a])return console.error(`ipv6.format() Â» ERROR: [${a}] option can only be \`true\` or \`false\`.`)}o.verbose&&console.info(`ipv6.format() Â» Formatting ${e}...`);let i=e;if(i=o.doubleColon?(o.verbose&&console.info("ipv6.format() Â» Replacing zero series w/ '::'..."),i.replace(/:(?:0+:)+/,"::")):(o.verbose&&console.info("ipv6.format() Â» Expanding '::' into zero series..."),n=i.split(":").filter(Boolean).length,r=o.leadingZeros?"0000":"0",n=Array(8-n).fill(r).join(":"),i.replace("::",`:${n}:`)),o.leadingZeros){o.verbose&&console.info("ipv6.format() Â» Adding leading zeros...");var s=i.split(":");for(let e=0;e<s.length;e++)for(;s[e].length<4;)s[e]="0"+s[e];i=s.join(":")}else o.verbose&&console.info("ipv6.format() Â» Stripping leading zeros..."),i=e.replace(/(^|(?<=:))0+(?!:)/g,"$1");return o.verbose&&i!==e&&console.info("ipv6.format() Â» Address cannot be formatted!"),i},validate:function(e,o={}){var r={verbose:!0};if(o={...r,...o},"string"!=typeof e)return console.error("ipv6.validate() Â» ERROR: 1st arg <address> must be a string.");for(const i in o){if(!Object.prototype.hasOwnProperty.call(r,i))return console.error(`ipv6.validate() Â» ERROR: \`${i}\` is an invalid option.
`+`ipv6.validate() Â» Valid options: [ ${Object.keys(r).join(", ")} ]`);if("boolean"!=typeof o[i])return console.error(`ipv6.validate() Â» ERROR: [${i}] option can only be \`true\` or \`false\`.`)}o.verbose&&console.info(`ipv6.validate() Â» Validating ${e}...`);const n=e.split(/::?/),t=n[n.length-1];e=!(e.includes("::")&&2<e.split("::").length||/:{3,}/g.test(e)||n.length<2||8<n.length||n.some(e=>!(/^[\dA-Fa-f]{1,4}$/.test(e)||e===t&&s.validate(t.replace(/\/(?:0|(?:[1-2]?\d)|32|96)$/,""),{verbose:!1}))));return o.verbose&&console.info(`ipv6.validate() Â» IP is ${e?"":"in"}valid IPv6 address!`),e}};if(require.main!==module)module.exports={ipv4:s,ipv6:e};else{const l="[0m",p="[1;91m",c="[1;33m",f="[1;97m",v={infoCmds:{help:/^--?h(?:elp)?$/,version:/^--?ve?r?s?i?o?n?$/}};let o=!1,r;for(const d of Object.keys(v))for(const g of Object.keys(v[d]))o||process.argv.forEach(e=>{e.startsWith("-")&&(r=v[d][g].test(e)?void(o=!0):e)});if(r&&(console.error(`
${p}ERROR: Arg [${r}] not recognized.`+l),console.info(`
${c}Valid arguments are below.`+l),i(["infoCmds"]),process.exit(1)),process.argv.some(e=>v.infoCmds.help.test(e)))i();else if(process.argv.some(e=>v.infoCmds.version.test(e)))console.info("v"+require("./package.json").version);else{const b=s.generate({verbose:!1});a(b),console.log(f+b+l)}function i(e=["cmdFormat","formatOptions","infoCmds"]){const o={cmdFormat:[`
${c}generate-ip [commands]`+l],infoCmds:["\nInfo commands:"," -h, --help                  Display help screen."," -v, --version               Show version number."]};e.forEach(e=>{o[e]?.forEach(e=>{{const n=process.stdout.columns||80,t=[],o=e.match(/\S+|\s+/g);let r="";o.forEach(e=>{var o=n-(0===t.length?0:29);r.length+e.length>o&&(t.push(0===t.length?r:r.trimStart()),r=""),r+=e}),t.push(0===t.length?r:r.trimStart()),t.forEach((e,o)=>console.info(0===o?e:" ".repeat(29)+e))}})})}function a(e){e=e.replace(/\s+$/,"").replace(/"/g,'""'),"darwin"===process.platform?n(`printf "${e}" | pbcopy`):"linux"===process.platform?n(`printf "${e}" | xclip -selection clipboard`):"win32"===process.platform&&n(`Set-Clipboard -Value "${e}"`,{shell:"powershell"})}}