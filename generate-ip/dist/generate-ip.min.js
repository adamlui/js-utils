let randomInt;try{({randomInt}=require("crypto"))}catch(err){const browserCrypto=window.crypto||window.msCrypto;randomInt=(min,max)=>{var randomVal=browserCrypto?.getRandomValues(new Uint32Array(1))[0]/4294967295||Math.random();return Math.floor(randomVal*(max-min))+min}}const ipv4={generate:function(options={}){var defaultOptions={verbose:!0,qty:1};if(validateOptions(options,defaultOptions,"https://github.com/adamlui/js-utils/tree/main/generate-ip#ipv4generateoptions","ipv4.generate({ verbose: false, qty: 3 })")){(options={...defaultOptions,...options}).verbose&&console.info(`ipv4.generate() » Generating IPv4 address${1<options.qty?"es":""}...`);var ips=[];if(1<options.qty)for(let i=0;i<options.qty;i++)ips.push(this.generate({...options,qty:1,verbose:!1}));else{var segments=[];for(let i=0;i<4;i++)segments.push(randomInt(0,256));ips.push(segments.join("."))}defaultOptions=1<options.qty?ips:ips[0];return options.verbose&&(console.info(`ipv4.generate() » IPv4 address${1<options.qty?"es":""} generated!`),1===options.qty?console.info("ipv4.generate() » "+defaultOptions):"undefined"!=typeof require&&require.main.filename.endsWith("cli.js")||console.info("ipv4.generate() » Check returned array.")),defaultOptions}},validate:function(address,options={}){var docURL="https://github.com/adamlui/js-utils/tree/main/generate-ip#ipv4validateaddress-options",defaultOptions={verbose:!0};if("string"!=typeof address)console.error("ipv4.validate() » ERROR: 1st arg <address> must be a string."),console.info("ipv4.validate() » For more help, please visit "+docURL);else if(validateOptions(options,defaultOptions,docURL,"ipv4.validate('0.0.255.255', { verbose: false })"))return(options={...defaultOptions,...options}).verbose&&console.info("ipv4.validate() » Validating IPv4 address..."),defaultOptions=!(4!==(docURL=address.split(".")).length||docURL.some(segment=>!/^\d+$/.test(segment)||parseInt(segment,10)<0||255<parseInt(segment,10))),options.verbose&&console.info(`ipv4.validate() » IP is ${defaultOptions?"":"in"}valid IPv4 address!`),defaultOptions}},ipv6={generate:function(options={}){var defaultOptions={verbose:!0,qty:1,leadingZeros:!1,doubleColon:!0};if(validateOptions(options,defaultOptions,"https://github.com/adamlui/js-utils/tree/main/generate-ip#ipv6generateoptions","ipv6.generate({ leadingZeros: true, qty: 5 })")){(options={...defaultOptions,...options}).verbose&&console.info(`ipv6.generate() » Generating IPv6 address${1<options.qty?"es":""}...`);var ips=[];if(1<options.qty)for(let i=0;i<options.qty;i++)ips.push(this.generate({...options,qty:1,verbose:!1}));else{const pieces=[],{qty,...nonQtyOptions}=options;for(let i=0;i<8;i++){let hex="";for(let j=0;j<4;j++)hex+=randomInt(0,16).toString(16);pieces.push(hex)}ips.push(this.format(pieces.join(":"),{...nonQtyOptions,verbose:!1}))}defaultOptions=1<options.qty?ips:ips[0];return options.verbose&&(console.info(`ipv6.generate() » IPv6 address${1<options.qty?"es":""} generated!`),console.info(1===options.qty?"ipv6.generate() » "+defaultOptions:"ipv6.generate() » Check returned array.")),defaultOptions}},format:function(address,options={}){var zeroSegment,docURL="https://github.com/adamlui/js-utils/tree/main/generate-ip#ipv6formataddress-options",defaultOptions={verbose:!0,leadingZeros:!1,doubleColon:!0};if("string"!=typeof address)console.error("ipv6.format() » ERROR: 1st arg <address> must be a string."),console.info("ipv6.format() » For more help, please visit "+docURL);else if(this.validate(address,{verbose:!1})){if(validateOptions(options,defaultOptions,docURL,"ipv6.format('0d::ffff:192.1.56.10/96', { leadingZeros: true, doubleColon: false })")){options={...defaultOptions,...options};let formattedAddress=address;if(formattedAddress=options.doubleColon?(options.verbose&&console.info("ipv6.format() » Replacing zero series w/ '::'..."),formattedAddress.replace(/:(?:0+:)+/,"::")):(options.verbose&&console.info("ipv6.format() » Expanding '::' into zero series..."),defaultOptions=formattedAddress.split(":").filter(Boolean).length,zeroSegment=options.leadingZeros?"0000":"0",defaultOptions=Array(8-defaultOptions).fill(zeroSegment).join(":"),formattedAddress.replace("::",`:${defaultOptions}:`)),options.leadingZeros){options.verbose&&console.info("ipv6.format() » Adding leading zeros...");var pieces=formattedAddress.split(":");for(let i=0;i<pieces.length;i++)for(;pieces[i].length<4;)pieces[i]="0"+pieces[i];formattedAddress=pieces.join(":")}else options.verbose&&console.info("ipv6.format() » Stripping leading zeros..."),formattedAddress=address.replace(/(^|(?<=:))0+(?!:)/g,"$1");return options.verbose&&(formattedAddress!==address?console.info("ipv6.format() » IP formatted successfully!"):console.info("ipv6.format() » IP already formatted to specs."),console.info("ipv6.format() » "+formattedAddress)),formattedAddress}}else console.error(`ipv6.format() » ERROR:  ${address} is not a valid IPv6 address.`),console.info("ipv6.format() » For more help, please visit "+docURL)},validate:function(address,options={}){var docURL="https://github.com/adamlui/js-utils/tree/main/generate-ip#ipv6validateaddress-options",defaultOptions={verbose:!0};if("string"!=typeof address)console.error("ipv6.validate() » ERROR: 1st arg <address> must be a string."),console.info("ipv6.validate() » For more help, please visit "+docURL);else if(validateOptions(options,defaultOptions,docURL,"ipv6.validate('0:0:0:0:0:ffff:192.1.56.10/96', { verbose: false })")){(options={...defaultOptions,...options}).verbose&&console.info("ipv6.validate() » Validating IPv6 address...");const pieces=address.split(/::?/),lastPiece=pieces[pieces.length-1];docURL=!(address.includes("::")&&2<address.split("::").length||/:{3,}/g.test(address)||pieces.length<2||8<pieces.length||pieces.some(piece=>!(/^[\dA-Fa-f]{1,4}$/.test(piece)||piece===lastPiece&&ipv4.validate(lastPiece.replace(/\/(?:0|(?:[1-2]?\d)|32|96)$/,""),{verbose:!1}))));return options.verbose&&console.info(`ipv6.validate() » IP is ${docURL?"":"in"}valid IPv6 address!`),docURL}}};function validateOptions(options,defaultOptions,docURL,exampleCall){const strDefaultOptions=JSON.stringify(defaultOptions,null,2).replace(/"([^"]+)":/g,"$1:").replace(/"/g,"'").replace(/\n\s*/g," "),strValidOptions=Object.keys(defaultOptions).join(", "),booleanOptions=Object.keys(defaultOptions).filter(key=>"boolean"==typeof defaultOptions[key]),integerOptions=Object.keys(defaultOptions).filter(key=>Number.isInteger(defaultOptions[key])),logPrefix=(validateOptions.caller?.name||"validateOptions")+"() » ";var printValidOptions=()=>{console.info(logPrefix+`Valid options: [ ${strValidOptions} ]`),console.info(logPrefix+"If omitted, default settings are: "+strDefaultOptions)},printDocURL=()=>{console.info(logPrefix+"For more help, please visit "+docURL)};if("object"!=typeof options)return console.error(logPrefix+"ERROR: [options] can only be an object of key/values."),console.info(logPrefix+"Example valid call: "+exampleCall),printValidOptions(),printDocURL(),!1;for(const key in options){if(!Object.prototype.hasOwnProperty.call(defaultOptions,key))return console.error(logPrefix+`ERROR: \`${key}\` is an invalid option.`),printValidOptions(),printDocURL(),!1;if(booleanOptions.includes(key)&&"boolean"!=typeof options[key])return console.error(logPrefix+`ERROR: [${key}] option can only be \`true\` or \`false\`.`),printDocURL(),!1;if(integerOptions.includes(key)&&(options[key]=parseInt(options[key],10),isNaN(options[key])||options[key]<1))return console.error(logPrefix+`ERROR: [${key}] option can only be an integer > 0.`),printDocURL(),!1}return!0}try{module.exports={ipv4:ipv4,ipv6:ipv6}}catch(err){}try{window.ipv4=ipv4,window.ipv6=ipv6}catch(err){}